const e=JSON.parse('[{"title":"Hello World","content":"\\nThis is the first post. It shows that the whole thing is working out nicely.","type":"markdown","publishing_date":"2024-12-02","tokenID":2,"nftMetadata":{"imageUrl":"https://my-imagestore.s3.nl-ams.scw.cloud/images/image_2_a9ce6a205fa3.png","prompt":"\\"A futuristic city with flying cars\\"","name":"AI Generated Art #2","description":"AI generated artwork based on the prompt: \\"A futuristic city with flying cars\\""}},{"title":"Ideas behind the blog stack","content":"\\nOver the last few years I kept writing notes and code in all kind of different ways. Sometimes I would use Wordpress, personal notes, markdown or Jupyter notebooks. They get saved in some repo and there you go. But these days I would like to bring them slowly together into some more common structure, i.e. on one common website.\\n\\nMy rather heavy reliance on Jupyter notebooks and markdown really mostly ruled out Wordpress. I also really like the ideas behind static site generators. They are simple, fast and can be version controlled. Then I had to choose the appropiate stack. The first logical idea would have been [mkdocs-material](https://squidfunk.github.io/mkdocs-material/). I have made great experiences with it in the past. It is super simple to set up, very configurable and it looks great. However, I recently started to have a deeper look into proper web tech of the type of React and it is simply sooo much more natural to work with those components etc.\\n\\nHaving settled on _React_, I first thought that it is totally enough to work with [create-react-app](https://create-react-app.dev/). However, you soon realize that there have been no releases over the last few years and that the project is not really maintained anymore. A cute little solution was then [nano-react-app](ttps://github.com/nano-react-app/nano-react-app). It is a super minimalistic setup and worked well as I started to play around.\\n\\nThis got me far enough with a single webpage. But as I wanted to have a blog with multiple posts, I had to think about how to structure the whole thing. And this is the moment where you need some kind of routers. And this is the moment, where I had to learn what react meant with the following statement [on their website](https://react.dev/learn/start-a-new-react-project):\\n\\n> If you want to build a new app or a new website fully with React, we recommend picking one of the React-powered frameworks popular in the community.\\n>\\n> You can use React without a framework, however we’ve found that most apps and sites eventually build solutions to common problems such as code-splitting, routing, data fetching, and generating HTML. These problems are common to all UI libraries, not just React.\\n>\\n> By starting with a framework, you can get started with React quickly, and avoid essentially building your own framework later.\\n\\nI really wanted to avoid this blow at the beginning but with the need for multiple pages I had to dive into this. After some research, I settled on [vike](https://vike.dev/). It provides everything I need and super flexible. It also has a bit of an indie vibe, which made it more sympathic. Finally setting it up is made quite easy with [create-bati](https://batijs.dev).\\n\\nSo here we are. I have a blog stack that I can work with. It is not perfect but it is a start. I will keep you updated on how it goes.","type":"markdown","publishing_date":"2025-01-03"},{"title":"Moving old lectures","content":"\\nIn my time in academia, I gave a few lectures on various topics. They are saved as latex, markdown, jupyter notebook, whatever you want. But to get started, I decided to move over a number of lectures on AMO that I gave for several years.\\n\\nI had them all saved on a website called Authorea and could export them directly as latex. So what could be easier than just importing them right ?\\n\\n## Challenge 1: Loading the markdown\\n\\nIt was really quite straight forward to convert the files through pandoc with the command `pandoc MY__INPUT_FILE.tex -s -o MY_FILE.md`. However, once you have markdown I have to import it into the website. And it is really at this stage where my little python world crumbles. You have the habit that files are yours and any access from any script is identical. However, within the world of javascript, I suddenly had to think about strange things like clients / servers / build times etc. In the end, I chose a solution similiar to the one described by [vike](https://vike.dev/markdown) with a little script that converts the markdown into a json file. This json file is then loaded into the website without the need of any `fs`.\\n\\n## Challenge 2: Equations and references\\n\\nThe first challenge, already existed for the blogs in general. But now I also had to handle equations and references. To render them you need a surprising amount of extensions to remark including:\\n\\n- [rehype-katex](https://www.npmjs.com/package/rehype-katex) for compiling the equations.\\n- [remark-gfm](https://github.com/remarkjs/remark-gfm) for references in footnotes\\n- [remark-math](https://www.npmjs.com/package/remark-math) for compiling equations.\\n\\nDespite all of those packages I needed to write a processing script that removed equation labels, equation alignements and also keep the spacing right. All in all it is nicer to use latex for long documents ...\\n\\n## Challenge 3: Images\\n\\nNow I was already quite proud about the result, but then I realized that the images were not loading. Remember how I was loading markdown into a `json` ? Well this messed up the references to images in production. So I had to copy the images into public folder. Further, I had to find a way to keep the images at an appropiate size. This worked nicely with the `img` link, but to have this you must allow for [rehype-raw](https://www.npmjs.com/package/rehype-raw). But then it was all good.\\n\\n## Conclusion\\n\\nBuilding up this kind of content management is really only for the curious. Otherwise, projects like docusaurus or astro are much more suited. But now I have a cute little system puzzled together and can extend it at will. All of this with a very limited amount of complexity. FWIW, the code can be [found here](https://github.com/fretchen/fretchen.github.io).","type":"markdown","publishing_date":"2025-01-06"},{"title":"Are decentral websites a thing for me ?","content":"\\nOver the last few years, I kept wondering what it might mean to host a \\"decentral\\" website very much like it is possible to decentralize certain financial services through smart contracts [^2]. What would be needed ?\\n\\n[^2]: The stuff done on [Uniswap](https://app.uniswap.org/) for example is quite impressive.\\n\\n- A decentral domain provider.\\n- A simple way to update the website.\\n- A decentralized storage system.\\n\\nAs we will see the first and last part are fairly straight-forward. For the decentral storage I continue to have some doubts.\\n\\n## Get an ENS domain\\n\\nNormally, each website is hosted on some servers and you can access them through some domain. Currently, this website is hosted by github, which also delivers me directly the domain address. And behind Github is simply a big company which handles the domain registration for me. If I want to go decentral, I try to avoid this company and simply register the domain on a blockchain. This is already possible with [ENS](https://ens.domains/). This is a great start as it gets us closer to have some fancy adress like `fretchen.eth`. To get this I needed to set up a wallet, where [Metamask](https://metamask.io/) seems to be the absolute standard nowadays. Once I have the wallet, I need to convert normal currency into the currency of the Blockchain, which is here [ethereum](https://ethereum.org/en/) [^1].\\n\\n[^1]: From my understanding Ethereum is THE biggest blockchain, which allows you to run smart contracts and quite energy efficient. It feels a bit like the Linux of the blockchain world.\\n\\nTo buy the ethereum, I had to go through [Kraken](https://www.kraken.com) and then send myself the ETH into the Metamask wallet. With the ETH I could quite simply register the domain of my choice with [ENS](https://ens.domains/). The purchase itself is fairly straight-forward and interestingly the domain is implemented as an NFT. This is the tech that is mostly used to allow people to claim ownership for weird pictures of bored apes. Here, it basically gets you exclusive access rights to the domain, which actually sounds quite smart. The other cool thing is that `ens.domains` is a DAO. So there is no single authority controlling it, but a community of people. Another fairly cool feature.\\n\\n## A simple way to update the website\\n\\nThis is the part where it started to get slightly non-trivial. In the centralized world we have simple no-code systems like [wordpress](https://wordpress.org/) that run on a server. All of this is not really available on decentral systes. So we need some way to fall back into static website generation very much like I do here. But once, you can host a static website on [github pages](https://pages.github.com/), it should also be theoretically ready to host it decentrally. Given that this is clearly solved (otherwise you would not read this), it was time to try to get this onto the block-chain.\\n\\n## A decentralized storage system\\n\\nAnd this is now the part which was really quite annoying. At first, you think \\"Let me put it onto the blockchain\\". Well you quite quickly realize that this is totally cost-prohibitive and that you need some kind of alternative. The most famous and commonly used solution there is the [IPFS](https://ipfs.tech/). As you put a file / folder into the IPFS it gets a CID and becomes discoverable for others. But in contrast to systems like ethereum it feels quite different:\\n\\n- Either you have to run your own IPFS node, which is quite a bit of work. I never was able to have relible notes with acceptable download speeds.\\n- Or you use a service like [Pinata](https://pinata.cloud/), which is a centralized service that pins your files for you. This is quite a bit of a bummer, as it is not really decentralized anymore. Further you mostly have to pay through dollars etc. So there is really no clear difference to the world of standard cloud storages there.\\n\\n## Conclusion\\n\\nAnd this is also the moment at which I wrote this blog post. I could now try to pay for the pinning service, put the CID onto eth.domains and claim some decentralized website. But what did I win ?\\n\\n- The service is still quite centralized.\\n- I have really slow site accessbility.\\n\\nSo I am really not sure if I will go down this road any further at this stage. I keep wondering how the master himself handles the storage of [his blog](https://vitalik.eth.limo/). But I guess I will have to keep on reading and keep waiting for helpful insights.","type":"markdown","publishing_date":"2025-01-18"},{"title":"Is mirror.xyz a thing ?","content":"\\n_The original post on mirror can be found [here](https://mirror.xyz/fretchen.eth/2rSj34fa8cyhADVEI0p_fVO25d-hCQ6AqC38QGBsik4?referrerAddress=0x073f26F0C3FC100e7b075C3DC3cDE0A777497D20)._\\n\\nOver the last few weeks I kept investigating different ways to my website and to publish content. For the moment I am really happy with the tradtional web2 setup where we I host the static website and voila. However, I recently stumbled across [mirror.xyz](https://mirror.xyz/) and I am intruiged. It feels very much like other publishing platforms like [medium](https://medium.com/). You write a post (like this one) and publish it. With the right ens name and metamask wallet the whole login experience is really smooth. Now the neat thing comes in with the financials. It does not really cost you anything to publish your post which is already a nice break from the usual web3 world where even breathing costs you money. But the neat thing is that people can support you as a creator by mint and liking your post. All of this is deeply integrated into the euthereum eco system and the low fees are enabled by the [optimism chain](https://www.optimism.io/).\\n\\nThis all inspires new approaches to publishing in a very decentralized way. You publish, people can verify how you are and payment is also included. This takes a lot of the creepiness of advertisement based platforms away. So I think that I will start to cross post these posts to mirror and see how it goes.\\n\\nThe original post on mirror can be found [here](https://mirror.xyz/fretchen.eth/2rSj34fa8cyhADVEI0p_fVO25d-hCQ6AqC38QGBsik4?referrerAddress=0x073f26F0C3FC100e7b075C3DC3cDE0A777497D20).","type":"markdown","publishing_date":"2025-03-09"},{"title":"Can I have interactive python pages ?","content":"\\n_The original post on mirror can be found [here](https://mirror.xyz/fretchen.eth/iglgKZeAeHcUc_-Ya9cjQQ1vUNqhJTRUswredn-53e8?referrerAddress=0x073f26F0C3FC100e7b075C3DC3cDE0A777497D20).\\\\_\\n\\nOne of my main motivations to start this website was to consolidate different lectures, writings and other things that accumulated over the years in different places. The first project was to actually move my AMO lectures. This is now finished and can be found over [here](https://www.fretchen.eu/amo). I started with this as it was a really simple test case without anything interactive components.\\n\\nHowever, I have a few more projects which are really based on [jupyter](https://jupyter.org/) notebooks. jupyter notebooks are just a fantastic tool to combine notes with simple visualizations and the [jupyter book](https://jupyterbook.org) project is really a great way to publish them. The only \\"annoying\\" drawback has been for years that you have to somehow download the notebook and run it locally or go into some service like [binder](https://mybinder.org/).\\n\\nThe rise of python in the browser actually promises to changes that at some point. What does this mean ? Projects like [jupyterlite](https://github.com/jupyterlite) allow you to run the full jupyter experience without any installation. And tools like [pyodide](https://pyodide.org/en/stable/) bring python directly into the brower. Just python programming without the cloud, or any installation. It all just runs in the browser. This would make the jupyter notebooks that I loved so extremely portable. And actually, there are now package that attempt to connect this directly to [react](https://github.com/elilambnz/react-py). If this worked out I would have:\\n\\n- A blog that is written in markdown.\\n- The possibility to add small python snippets directly into the blog.\\n- All of this part of a website without the need to install anything.\\n\\nI gave all of this a try and `react-py` looked particularly interesting. However, the ecosystem still seems fairly young and it was super painful to get even the simplest examples to run. I must admit that I gave up for the moment, when I understood that pyodide and hence `react-py` does always require a [build for tests](https://pyodide.org/en/latest/usage/working-with-bundlers.html). Having it in `dev` would have been a minimum to make it an enjoyable experience.\\n\\nSo for the moment I will most likely just transform the jupyter notebooks into react / plein markdown and then see how the ecosystem evolves. But kudos to the people behind _python-in-the-browser_. This is a super exciting development for all kind of data science and will make the ecosystem much more decentralized and accessible. Any suggestions or additional information ? Then just leave them in the comments below.","type":"markdown","publishing_date":"2025-03-11"},{"title":"Running an image generator","content":"\\nJust as about every other person on the planet, I have been playing around with [stable diffusion](https://stability.ai/) and other image generators. But I personally do not care too much about the exact details, which model is best etc. I wanted to have my own personal system. I made some good progress on it and I felt that it could be time to share some of my findings.\\n\\n## My goal\\n\\nWhen I set up my system, I started with a few conditions:\\n\\n1. I want it to be accessible really easily my own website, which is static.\\n2. I want to use open source models.\\n3. The infrastructure to run the system should be hosted in Europe.\\n4. At some point I must be able to limit access to the system or let people pay for it.\\n\\n## Using model for image generation\\n\\nTo generate the images I need to have some back-end that is non-static and that I can easily call through some API. Several options exist, but for the moment I really like the system by [Ionos](https://cloud.ionos.de/managed/ai-model-hub). It is a straight-forward API with several open source models for image generation like [Stable Diffusion](https://stability.ai/) or FLUX. The system is hosted in Europe, which I personally like these days and the costs are ok. You can get started within minutes on a local setup.\\n\\n## Using the model in a static website\\n\\nHowever, to use the model you need to have some kind of API key. And on a static website there is no really nice way to store such keys. Therefore, I decided to go with a serverless setup. Here, I must admit that I was surprised how hard it was to find something that was not run by an American company. If you go with the American companies you have an almost infinite choice between Amazon, Vercel and so on. However, on the European side, I could only find [Scaleway](https://www.scaleway.com/en/) with their functions. This setup works quite nicely. Now I have a simple website that calls Scaleway, which then calls the Ionos API and returns the image. The whole thing is hosted in Europe.\\n\\n## Decentral payments\\n\\nThe generation of each image has a cost of less than one euro. However, somehow I need to pass the cost to the user. I really do not want to go with weird advertisement things. So I could go with some traditional payment services. However, it would be substantially more fun to use some web3 payment. I am now quite sure that ChainLink functions are an interesting way to go. It is just a slightly steep learning curve and a fairly new technology. Let\'s see how it goes. I will keep you updated on the progress.","type":"markdown","publishing_date":"2025-04-06"},{"title":"A decentral support button","content":"\\nI recently came across the `mirror` platfrom and was really impressed by the possibilities of such a dentralized [social platform](4). What intrigued me most is that it might give content creators a very simple and direct way to get paid for the content. But after some more digging I must admit that it is not clear to me if [mirror.xyz](https://mirror.xyz/) is still really actively maintained. So I decided to give it a try and see if I might be able to build something similar. As you can see on the top right of this site I succeeded and will explain how I did it. I am not sure yet how long this post will be, so buckle up.\\n\\n## The goal\\n\\nI wanted to have a simple like / support button. Its functionality is quite straightforward:\\n\\n- As the user clicks on the button, he commits to support the content with a small amount of money.\\n- The support is done via a transaction on the blckchain.\\n- The smart contract keeps track of the number of likes for each site.\\n\\nFor me this is interesting for a few reasons:\\n\\n- It is a really simple smart contract. So it allows me to learn the basics of smart contracts in a very simple way.\\n- It sets up a simple way to support the content that I create on this website.\\n\\n## How to use the support button\\n\\nTo use the button you need to have a wallet that is connected to the Ethereum network. I used [MetaMask](https://metamask.io/) for this.\\n\\nIn the next step, you need to make sure that you have sufficent ETH on the [optimism chain](https://www.optimism.io). If you don\'t have any ETH on the optimism chain, you can use the [optimism bridge](https://app.optimism.io/bridge) to transfer some ETH from the Ethereum mainnet to the optimism chain.\\n\\nNow, you are all set up to use the support button that you can find on the top right of this page. When you click it, a popup will open that allows you to send ETH to the smart contract. The amount of ETH is set to 0.002 ETH (rougly 50 cents). Once you confirm the transation, the smart contract will be called and the amount of ETH will be sent to the smart contract. The smart contract will then keep track of the number of likes for this specific URL and the number of supporters will be incremented. Thanks for your support!\\n\\nNow that you know how to use the button, I will explain how I set everything up.\\n\\n## Setting up the smart contract\\n\\nIn a first step, I had to decide how my smart contract should look like and then also set everything up to deploy it.\\n\\n### The smart contract\\n\\nI decided for a really simple approach based on [solidity](https://soliditylang.org/). The `Support` smart contract main hasly the `donate` function, which takes a URL as input and allows users to send ETH as a form of appreciation. Once the donation is called, ETH is transferred to the contract owner and the count of `urlLikes` is incremented.\\n\\nThe contract also includes a `getLikesForUrl` function, which allows anyone to check the number of likes for a specific URL. The contract is designed to be secure and efficient, utilizing OpenZeppelin\'s libraries for access control and reentrancy protection. One of the neat things of the blockchain is that you can the see fully deployed and verified code [here](https://optimistic.etherscan.io/address/0x314b07fbd33a7343479e99e6682d5ee1da7f17c1#code#F1#L1).\\n\\nAs I designed the contract, I actually wondered if I should use other approaches like NFTs or ERC20 tokens. But in the end there is no need for that at this stage and any of those increasing complexities may increase the risk of bugs and the gas fees.\\n\\n### Deploying and testing the smart contract\\n\\nAs this was my first smart contract, I actually had to learn all the basics. It would seem that you have two major frameworks nowadays: [Foundry](https://book.getfoundry.sh/) and [Hardhat](https://hardhat.org/). Hardhat seemed to fulfill all my requirements and well integrated into the usual javascript workflows. To get started, I really like the documentation for the [Hardhat Runner](https://hardhat.org/hardhat-runner/docs/guides/compile-contracts) here. In summary, the steps are:\\n\\n1. Install hardhat and the dependencies\\n2. Compile the contracts `npx hardhat compile`.\\n3. Write the tests for the contracts. I used [chai](https://www.chaijs.com/) and [viem](https://hardhat.org/hardhat-runner/docs/advanced/using-viem) for this.\\n\\nNow we are ready to deploy and test the contract. In the test environment this is quite straightforward as described [here](https://hardhat.org/hardhat-runner/docs/guides/deploying). But as you would like to deploy the contract to a real network, you need to set up a few things as described [here](https://hardhat.org/hardhat-runner/docs/guides/verifying). First, you need to create an account on [Alchemy](https://www.alchemy.com/) and get an API key. Then we can once again deploy the contract to the network of my choice, which was Optimism.\\n\\nFinally, we need to verify the contract on the blockchain. This is important as it allows others to see the code and verify that it is working as expected. Here again we need to set up a few things. First, you need to create an account on [Etherscan](https://etherscan.io/) and get an API key. Then, you need to set up the `ETHERSCAN_API_KEY` environment variable with your API key.\\n\\n### The Optimism chain\\n\\nOne of the crucial points for the support button was that it must not be too costly to use. On the Ethereum mainnet, I have frequently encountered gas fees of 20-50 USD. This would have been prohibitive for a simple like button.\\n\\nEvery blockchain transaction requires computational resources that must be paid for with \\"gas fees.\\" These fees represent the cost of having your transaction processed and validated by the network:\\n\\n- On Ethereum\'s mainnet, high demand for block space drives fees to levels that make micro-transactions impractical\\n- When gas costs $20-50 per transaction, sending a $0.50 support donation becomes economically absurd\\n- Layer 2 solutions like Optimism process transactions in batches and post the cryptographic proof to Ethereum, distributing that mainnet gas cost across many transactions.\\n\\nTherefore, I decided to investigate layer-2 alternatives, which promise much lower fees. As I investigated the major alternatives, I came across [Base](https://www.base.org/), [Arbitrum](https://arbitrum.io/), [Optimism](https://www.optimism.io/) and [Linea](https://linea.build/). All of them seemed fairly mature with slightly different focuses. Base is closely aligned with Coinbase, which makes it a bit less attractive for me. Linea seemed to be still quite new and not as widely adopted. Optimism on the other hand has some nice documententation, a strong community focus and a lot of projects already running on it. So I decided to go with Optimism.\\n\\nYou can see all the details for the deployed contract and activity on [Optimism Etherscan](https://optimistic.etherscan.io/address/0x314b07fbd33a7343479e99e6682d5ee1da7f17c1).\\n\\n## The frontend\\n\\nAfter I had the smart contract up and running, I needed to integrate it into the website. I decided to integrate it via [wagmi](https://wagmi.sh/), which is a library that makes it easy to interact with Ethereum from a react app. It provides a simple API for connecting to wallets, sending transactions, and reading data from the blockchain. It is also built around [viem](https://viem.sh/), which is a library for interacting with Ethereum in a type-safe way. This makes it easy to work with the blockchain and ensures that the code is safe and secure.\\n\\nThe integration itself, involved two parts:\\n\\n- the connection to the wallet.\\n- the button itself.\\n\\n### The wallet connection\\n\\nTo set up the wallet, I followed quite closely the [wagmi documentation](https://wagmi.sh/react/getting-started). However, I am using `vike` and there is no `App.tsx`. So the integration is a bit different. I was able to activate `tanstack-query` with the [official plugin](https://vike.dev/tanstack-query). To wrap Wagmi itself, I hooked into the `LayoutDefault.tsx` component, which worked out quite nicely. For the rest I could simply follow the very simple and straight forward guide [here](https://wagmi.sh/react/guides/connect-wallet). I had a quick look into the different kits, but wanted to learn things for myself at this stage. If I ever decide to use one of the kits, I will likely try out [AppKit](https://appkit.dev/) first.\\n\\n### The support button\\n\\nNow that the wallet was set up, I could directly integrate the support button. This was also surprisingly straight forward as I could simply follow the documentation on how to [write](https://wagmi.sh/react/guides/write-to-contract) and [read](https://wagmi.sh/react/guides/read-from-contract) small contracts. To get the number of supports, I simply call the `getLikesForUrl` function of the smart contract. To support the content, I call the `donate` function of the smart contract. That\'s it. As every developer in the world, I spent too much time one the styling of the button, but otherwise it was simply an enjoyable experience.\\n\\n## My main learnings\\n\\n- Fees on L2 chains are really low now. A transfer of 50 cents sometimes costs less than 1 cent in gas fees. So this problem is really pretty much solved for now and L2s are really usable.\\n- The development experience is really quite nice. Backend and frontend are nicely separated etc.\\n- The biggest question for me will be how the whole transfer to L2 chains will work out in the long term.\\n- I will continue to play with similiar applications as soon as I think about some kind of transfers.\\n\\n## A small look into the future\\n\\nI learned a few things that I would likely change in the future. I have mainly two things in mind.\\n\\n1. First, I would like to make sure that the contract is [upgradable](https://docs.openzeppelin.com/upgrades-plugins/writing-upgradeable). While it would make the initial deployment process more complex, it would make the entire system much easier to maintain in the long run.\\n2. Second, I would most likely make it possible to select the adress of the recipient. This would also allow others to use the same contract and make the whole thing a bit more generic.\\n\\nSo I hope that you enjoyed the post. Comments as usual below. And any support through the support button is highly appreciated.","type":"markdown","publishing_date":"2025-04-21"},{"title":"My short lived contact with the world of VCs in Germany","content":"\\nFor a number of years, I worked in academia on the topic of quantum hardware. You can find the traces of these activities sprinkled over this blog. But over time it became increasingly clear to me that I would like to venture outside of this well-trodden path. As this was the time when names like [IonQ](https://ionq.com/), [IBM](https://quantum.ibm.com/) or [Pasqal](https://www.pasqal.com/) really were exciting developments, I obviously also investigated the possibility of a startup. If these (senior) peers could do it, why not me ?\\n\\n## The motivation\\n\\nMy research experience focused on hardware development, so it felt natural to look into this direction and I left the topic of software on the side. However, this comes with enormous drawbacks:\\n\\n- Quantum hardware is _notoriously_ slow to develop. It takes you years to get something close to a working industrial prototype.\\n- Quantum hardware is notoriously expensive, which means that you are very quickly forced to raise substantial amounts of capital for deep tech. 1M is basically the very minimum to even start thinking about something super basic.\\n- Without working prototypes, we couldn\'t make a convincing business case.\\n\\nTaken together these three conditions meant that the very first steps of the company would need 1 to 2M€ of funding in the seed / preseed phase. To get this amount of money we basically had two options:\\n\\n- **Option A - Get public funding**: This comes attached with A LOT of strings, A LOT of administration and it is quite slow. It is nice to slowly expend out of your lab, but is not really adapted to get a startup of the ground.\\n- **Option B - Go to the VCs and pitch your case**: Sounds fast, business oriented and with a clear growth path.\\n\\nSo we had a deeper look into option B with the VCs.\\n\\n## The VCs\\n\\n**A new culture:** As we started, we needed a team of at least three people to start our fundraising campaign. Talking to VCs, we quickly realized that that they really do not care about the tech but only about the business case. But how do you explain the business case without a working prototype ? You basically have to make up the business case based on your current knowledge. And once you dream up those business cases, you have to show that they are scalable. FAST. So we had no working prototype for industrial standards, therefore no possibility to benchmark the business cases on sound numbers. Yet, we still had to present enormously ambitious business plans to the VCs.\\n\\n**A world of (unfounded?) assumptions:** This world was completely different from the academic environment that I was used to. This made the beginning of the whole adventure super exciting. People are fast and responsive. They have a different perspective to your well known technical approach. They force you to think about the project in business ways that you never thought about before. On the other hand, this world is also based on enormous amounts of assumptions. hese assumptions were often impossible to verify for years. And these assumptions got stretched increasingly to make the ambitions of the VCs work. Further, these assumptions have substantial consequences. This was in deep contrast to the academic world, where failure does not threaten your job. When your academic experiments fail, you do another one and move on. If your business assumptions fail you have burned massive amounts of money and everyone lost their job.\\n\\n**Diverging expections:** Given these consequences, I personally would have liked to go the cautious route. Yet, within the process our predictions got increasingly detached from reality. At some point we had discussions with technical experts that told us that our time lines are at least by a factor of two (rather four) to optimistic. On the other hand, we had discussions with VCs that told us that our timelines were at least a factor of two (rather four) to slow to make the fundraising cycle work. Personally, this was hard to digest and eventually one of the reasons why I had to get out of this business quite quickly.\\n\\n## Some realities on returns\\n\\nYou might think it\'s still worth it for the freedom and potential wealth, right ? Well, not so fast.\\n\\n- VCs in Germany typically asked for at least 20-30% of the company to invest 1-2M €.\\n- They also expect you to keep the equity within the company.\\n- You have leaver clauses which bind you for years to the company.\\n- With each round the shares of the owners get quite substantially diluted.\\n\\nThen you can go through the different scenarios\\n\\n_Scenario A: You go bust._ This is what happens in something like 80% of the time. Over the years, you got your salary. It was sub industry and with enormous amounts of stress. To make the numbers simple let\'s say that you can assume that this scenario lost you roughly 100k (give or take) compared to your standard industry job.\\n\\n_Scenario B: You muddle through._ This will happen approximately 15% of the time. In this scenario you do better than in scenario A and you do not go bust. You have a product. It works, but it is not quite as profiable as you would like. This is after you raised Seed (VC took 30%), Series A (VC took 30%) and now it becomes clear that a Series B will not fly. So you have to find some buyer that takes the IP of the company for 5M and move on. So in this scenario, you basically end with a 500k payday as one of the founders.\\n\\n_Scenario C: Payout by the big industrial player._ This will happen between 1 and 5 % of the time. This is the dream scenario where everythings works out for you. You perform, you have raised Seed (VC took 30%), Series A (VC took 30%) and Series B (VC took 30%) and now you have pay day with a buyout of 50M. So in this scenario, you basically end with a 5M payday personally.\\n\\nWhat is the expected value of the whole enterprise ? Taking the numbers above, we get to:\\n\\n(80% × -100.000€) + (15% × 500.000€) + (5% × 5M€) = ~250.000€\\n\\nSo I end up with a rough expected return of 250k give or take. So it is certainly not a loss. But is this worth the stress and the uncertainty ? This is most likely the key question that everyone has to decide.\\n\\n## And the freedom in all of this ?\\n\\nWith the startup does not just come the premise of money, but also the freedom to do what you want. The little I saw, I have strong doubts about this. The VCs bring the money and this means that they also set the tone. Your business plan becomes focused on securing the next funding round, not what you think is best. And I would be slightly surprised if there was a relaxed approach to monitoring progress. Remember that they gave you 1M for an idea ? Now you better deliver. If you want to leave, remember those leaver clauses which bind you to the company for a number of years. So you are basically stuck in a company that you do not like anymore. Taken together I rarely had the feeling of freedom in this setup as the VCs are the ones that set the tone. Not the clients. Not the employees. Not the founders. The VCs. But I genuinely hope that I had simply had a bad impression on this part.\\n\\n## The end of the story\\n\\nI felt a huge amount of releave when I left this scene. I was never able to shake the imposter syndrome and could not enjoy the ride. I felt the excitement but the negative feeling were substantially stronger. Nowadays, I evolved on towards a completely different career path, which I am grateful about.\\n\\nWhat saddens me most is how difficult it is to launch a deep tech startup in Germany. I still feel that the step from academic research and deep tech startups in Germany is so much bigger than it could be and a number of things could improve the situation quite drastically:\\n\\n- Better incubators connected to Universities. Many universities have little incentive to develop strong incubator programs. Hence they are rarely up the potential. This would lighten the knowledge gap of researchers as they have to discuss the wonderful world of business. I would be interested to hear about successful examples.\\n- Simplify the public funding process. It was really a nightmare to go through the public funding process. It genuinely felt like a bureaucracy that was only made to up to let some people feel important. Please, make it easier.\\n- Get us all VCs with deeper knowledge. I think that this speaks to itself.\\n\\nI hope that you enjoyed the post. If you have any comments or suggestions, please leave them in the comments below. I would be happy to hear from you. And as usual, do not forget to push the like button.","type":"markdown","publishing_date":"2025-05-14"},{"title":"Generating AI images, paying anonymously and little","content":"\\nAs I wrote already in one of my [previous posts](6), I have set up a small image generator on my website. The whole thing is hosted in Europe and I am using open source models. The system is running on a serverless setup, which is also hosted in Europe. The costs are low and I am happy with the setup. But to make it sustainable, I need to charge the users for the images at least as much as I get charged.\\n\\nI do not want to go with advertisement or anything like that. To test the waters, I have recently set up a support button to \\"support\\" the website. This experiment proofed that it Layer-2 solutions on ethereum are nowadays super cheap and up for task. Feel free to have a look into my note over [here](7).\\n\\nIn the last few week I was able to tie the two ingredients (the AI system and the blockchain) together and I will describe the setup here.\\n\\n## The challenge\\n\\nNowadays it costs roughly 5 to 6 cents to generate an image with services like [Ionos](https://cloud.ionos.de/managed/ai-model-hub) or [deepinfra](https://deepinfra.com/). Therefore, I wondered if it was possible to implement a payment system with similiar cost but with anonymous web3 payment systems instead of Stripe etc. This meant mostly that I had to solve two major challenges:\\n\\n- **Challenge 1:** How could I connect the ethereum payment systems to the serverless systems.\\n- **Challenge 2:** How could I minimize the fees and remain competitive ?\\n\\n## Connect payments to the AI serverless system\\n\\nThis part actually required quite a bit of try and error. At first I thought that I could simply tell the external serverless system to \\"listen\\" to an ethereum event on the contract. However, this would have required a constant listener and would have been too expensive.\\n\\nIn the second step, I though about oracle systems like [Chainlink](https://chain.link/). However, this came with a few shortcomings:\\n\\n- With chainlink you have to pay 3 cents per request. This is substantial overhead.\\n- The only chainlink service that was really appropiate would have been [chainlink functions](https://chain.link/functions). However, this one needs that external API to answer within 9 seconds, which is not possible with the current AI setup, which takes up to 30 seconds to generate the images.\\n\\nI therefore decided to set up the contract on my own.\\n\\n### The Smart NFT contract: Bridging Blockchain and AI\\n\\nThe [`GenImNFT`](https://optimistic.etherscan.io/address/0x9859431b682e861b19e87Db14a04944BC747AB6d#code) contract is the heart of my solution. It functions as an automated intermediary between users who want AI-generated images and the system that creates these images. Here are its key features:\\n\\n- **NFT Creation:** Users can purchase (or \\"mint\\") an NFT for a small fee (currently about 10 cents in ETH). This NFT initially contains a placeholder image.\\n\\n- **Intelligent Image Updates:** Once a user has paid, the contract stores the empty NFT and signals that an image can be added. When a new image is updated by a separate wallet, the contract updates the NFT with the new image link and records that this update has occurred. No further changes to the image are possible by external wallets afterwards.\\n\\n- **Automatic Payment:** The contract automatically pays the wallet that provided the image once the image has been updated. This happens directly within the blockchain, without requiring separate payment processing.\\n\\n### Using the contract\\n\\nI could then use the contract for the [image generation](../imagegen) in a fairly straight-forward fashion which handles both the creation of the NFT and the image generation. When a user enters a prompt and clicks \\"Mint & Generate,\\" the component first calls the contract\'s safeMint function, sending along the required payment (around 10 cents in ETH). This transaction creates a new NFT with a temporary placeholder image.\\n\\nAfter a successful mint, the component extracts the newly created token ID from the transaction receipt. This token ID uniquely identifies the NFT that needs to be updated. The component then sends this token ID along with the user\'s prompt to a serverless API function that handles the AI image generation. This process is similar to the previous setup, but now the serverless function has been extended to update the NFT with the generated image using a dedicated wallet.\\n\\nThe payment system works in two steps: first, the user pays the contract when minting the NFT; then, when the image is generated and the NFT is updated, the contract automatically releases payment to the wallet that submitted the image. This ensures that users only pay for successfully generated images, and image providers are compensated only after delivering the image.\\n\\n## The total costs\\n\\nAll in all, the costs for the serverless system and the transactions is almost negligible. On this part, I built up directly on the very positive experience I had with the [support button](7) that works on the [optimism](https://www.optimism.io/) chain.\\n\\nIf I wanted to optimize the system, it would most likely be possible to offer the service for 1 cents above the price charged by the image generation services. However, for the moment I have set up a buffer against the rather hefty fluctuations of ethereum such that I can currently offer the service for roughly 10 cents an image.\\n\\n## Some nice side effects of the system\\n\\nAs I set up the system, I discovered the perks of the whole NFT setup. I actually decided to follow the ERC-721 standard to safe all the important imformation concerning the image. The prompt is part of the description. The model and the time of minting are simply attributes. This allowed me to directly list some of the images on [opensea](https://opensea.io/) and opens the possibility to trade some of the cooler images.\\n\\n## Conclusion\\n\\nTaken together, I am super happy with the setup:\\n\\n- Anyone can generate AI images for a small fee such that it is sustainable.\\n- The costs are fully under control and the system is fully automated.\\n- The system is fully anonymous and does not require any personal data (which I never wanted to collect anyways). Say goodby annoying GDPR banners.\\n- The system is fully decentralized and can be used by anyone that cares.\\n\\nSo, if you want to generate some images, feel free to check out the [image generation page](../imagegen) and mint your first NFT. I am looking forward to see what you can come up with and what are your comments.","type":"markdown","publishing_date":"2025-05-20"},{"title":"Updates to the website","content":"\\nIt has been roughly 6 months since I started this website. All in all, it is a enjoyable experience to have this super flexible stack on which I can simply play around in the way I want. So it is time to summarize the most important changes and updates on the stack over the last few months.\\n\\n## Panda CSS for consistent styling\\n\\nAt the beginning, I kept the styling super minimalistic and just used inline css. This was ok at the beginning but by the time that I started to add the lecture notes and the image generator it become quite cumbersome to work in this way. So I started to look for a proper CSS solution. I wanted something that is simple, flexible and does not require a lot of setup. After some research, I settled on [Panda CSS](https://panda-css.com/). It allows me to write CSS in a very JS-like way, which is very convenient. It also has a great integration with Vike and works well with the rest of the stack. All in all, there will be no looking back.\\n\\n## Copilot for code refactoring\\n\\nIn the middle of the refactoring, I also made my first experiences with the [Copilot Agent Mode](https://github.blog/ai-and-ml/github-copilot/agent-mode-101-all-about-github-copilots-powerful-mode/). Previously, I had only used Copilot in the normal way, i.e. it would suggest code snippets as I was typing. However, with the Agent Mode, I can now let Copilot refactor my code in a much more comprehensive way. I only gave the following instruction:\\n\\n> The code within the website folder uses pandacss. However in a lot of the components and pages similiar styles are defined independently and hence not consistent. The code should have all the style definitions in a consistent way in the `styles.ts` file.\\n\\nThen I let Copilot run with [Sonnet 4](https://www.anthropic.com/claude/sonnet) for about 20 minutes. Quite amazingly, it did a remarkable job involving fifteen files and hundreds of lines of code. All I had to do was a lint fix and [that\'s it](https://github.com/fretchen/fretchen.github.io/commit/8b9f37cb0ce2ef54bed23b034a40cebde72608b4). This really makes you wonder which projects are now possible that I put on the backburner before because they were just to long and not fun enough.\\n\\n## More lecture notes\\n\\nI was now able to move a number of lecture notes into the new [quantum](../quantum) section. It was all in all a rather straightforward process. I just had to convert the jupyter notebooks to markdown and then add them to the website. With the new content it actually became clear that the file based structure of content is a bit cumbersome. Yes, I previously started a new folder on each project. However, with the blog it would feel tempting to have a single stream of files, which are later sorted by tags etc into different views.\\n\\n## A quick outlook\\n\\nWe will see where it takes me from here but a number of things could be cool:\\n\\n- An image gallery for the generator that allows to browse the images, search for them and burn them if you feel like it. Maybe even have a functionality that automatically burns the images after a certain time if you don\'t want to keep them explicitly ?\\n- Introducing more tags etc to the blog to get a simpler handle on the content. Maybe I will be able to get rid of the folder structure and just have a single stream of content.\\n- On the more ambitious side, I really start to wonder if I can finally get quantum onto the blockchain. I had some thoughts on this, I think that it is possible, but I have to find the motivation to get started on it.","type":"markdown","publishing_date":"2025-05-26","tokenID":26,"nftMetadata":{"imageUrl":"https://my-imagestore.s3.nl-ams.scw.cloud/images/image_26_1a287f3473bf.png","prompt":"\\"A modern, open-source web interface showing a creative developer dashboard with features like le...","name":"AI Generated Art #26","description":"AI generated artwork based on the prompt: \\"A modern, open-source web interface showing a creative developer dashboard with features like lecture notes, a quantum section, blog post streams, and an AI image generator. The website uses clean, consistent styling with a hint of Panda CSS’s design aesthetic—modular, colorful but minimal, developer-friendly. Several people from diverse backgrounds (varying in age, gender, ethnicity, ability) are actively interacting with the interface: one person reviewing lecture notes, another browsing AI-generated images, a third writing or refactoring code using GitHub Copilot Agent Mode. One user scrolls through a blog post feed, while another manages content tags or explores settings for automatic image deletion.\\n\\nThe environment is creative and tech-forward—an open workspace or a cozy developer studio with large screens, personal items like coffee mugs or headphones, and soft lighting. Screens display snippets of code, markdown content, AI-generated visuals, and metadata tags. The overall feel is exploratory and productive, highlighting human-AI collaboration and open web development.\\n\\nVisual Style:\\n\\n    Tech-meets-creativity vibe\\n\\n    Clear web UI elements (lecture notes section, image generator, blog tag editor)\\n\\n    Glowing soft interface panels with code and markdown\\n\\n    Friendly, casual modern clothing for users\\n\\n    Diverse individuals collaborating or exploring alone\\""}},{"title":"A gallery of AI images","content":"\\nIn one of my [previous posts](9), I described how I set up a system to generate AI images and set up the payment system with ethereum. I liked the set-up, but it was very minimalistic and only focused on the generation process. However, with NFTs, you can do so much more and I started to work through the process. In a first step, I set up a gallery of the images that associated with the connected wallet. And in this post, I will describe how I set up the gallery and what I learned in the process.\\n\\n## Modernizing the contract\\n\\nThe images were previouslycreated with a standard [ERC-721](https://docs.openzeppelin.com/contracts/5.x/erc721) contract, which allows you to own Non-fungible tokens. But this ran into trouble once I tried to collect all the NFTs that were created by a single wallet. The details of the problems are rather technical and it took me some time to understand the issue, but luckily I was not the only one that ran into this problem. The solution was to use the [ERC-721 Enumerable](https://docs.openzeppelin.com/contracts/5.x/api/token/erc721#ERC721Enumerable) extension. This extension allows you to enumerate all the tokens owned by a specific address, which is exactly what I needed for the gallery.\\n\\nNow, I thought that this would be just a simple upgrade to the previous contract. However, the internal data structure is substantially different from the \\"normal\\" ERC-721 contract. Therefore, I simply created a new contract, wrote some tests and deployed it. The new contract is called [`GenImNFTv2`](https://optimistic.etherscan.io/address/0x80f95d330417a4acEfEA415FE9eE28db7A0A1Cdb#code) and it is a replacement for the previous contract. It has all the features of the previous contract, but it also allows you to enumerate all the tokens owned by a specific address.\\n\\n## Adding a gallery\\n\\nOnce, it was possible to enumerate the tokens, I could set up the gallery. At first, the gallery was simply another react component that queried the contract for all the tokens owned by a specific address. You could see the created NFTs and click on them to see the details. However, this was not very user friendly as the upper component with image preview and generation was still the main focus of the page. So the gallery and the generation felt really disconnected. So, I actually reworked the whole work flow within the [imagegen](../imagegen) component. It now only has a fairly small input and then contains the gallery below. This nicely integrates older pictures with new ideas and has all the functionality that I need. For the pictures in the gallery, I can zoom, download, share and delete them. This makes for me personally for a really nice user experience, just as I wanted it.\\n\\n## A possible evolution\\n\\nThe component now fulfills a lot of my personal needs. If I wanted to extend it further, this would most likely mean that I want to make it more social with features like:\\n\\n- User profiles to browse other people\'s AI art galleries\\n- Simple social features like favorites or comments\\n- Better discovery and search functionality\\n\\nHowever, this would mean a clear shift in focus. From a project that exclusively serves my personal needs to a project that attempts to create a community around the protocol. And this is a big step. I am not sure if I want to take this step. The step is even bigger as I would most likely not enjoy it to take it on my own. I would need to work together with others that share the same passion for the project. And to govern the hypothetical community, I would need to set up some kind of DAO (Decentralized Autonomous Organization). The logic here is simple. If I introduce social features for users, I also want to introduce some kind of social features, i.e. governance, for the gallery. I do not want to be the sole owner of the gallery and decide what goes in and what does not. I want others to have a say in the future of the gallery. So the current most likely evolution of the gallery is:\\n\\n- Try to learn how to set up a [DAO](https://docs.openzeppelin.com/contracts/5.x/governance).\\n- See if some kind of transaction fees for the DAO are in order. If the DAO supports the gallery, it should also be able to pay for the costs of the gallery, right ?\\n- Add minimal social features like seeing the NFTs of other users that like it.\\n- See if I can add some kind of social features like comments or likes just like I did with the [support button](7).\\n\\nBut this is all in the future. For the moment, I am happy with the gallery and the way it works. I hope you like it too and I am looking forward to your comments and suggestions.","type":"markdown","publishing_date":"2025-06-03","tokenID":24,"nftMetadata":{"imageUrl":"https://my-imagestore.s3.nl-ams.scw.cloud/images/image_24_4092c4541a95.png","prompt":"\\"A sleek, futuristic web interface showing a personal gallery of AI-generated NFT artworks connec...","name":"AI Generated Art #24","description":"AI generated artwork based on the prompt: \\"A sleek, futuristic web interface showing a personal gallery of AI-generated NFT artworks connected to a crypto wallet. The scene includes one or more users interacting with the interface—viewing images, clicking buttons, scrolling the gallery, or using the image generation input at the top. The users are shown from behind or in profile, seated at modern desks or standing at digital kiosks, with screens reflecting soft light. Each artwork is presented as a card with options like zoom, download, share, and delete. The environment hints at a creative, tech-savvy atmosphere—possibly a home studio, co-working space, or minimalist digital art lab. UI elements include Ethereum wallet icons, NFT badges, and interactive controls. Subtle hints at future features like comment icons, user profiles, or DAO governance panels are also visible.\\n\\nStyle & Details:\\n\\n    UI mockup meets concept art with human interaction\\n\\n    Modern techwear or casual clothing for users\\n\\n    Clean, bright interface with slight neon accents\\n\\n    Glass panels, soft gradients, glowing edges\\n\\n    Inspiration: OpenSea, futuristic art apps, virtual gallery spaces\\""}},{"title":"A public gallery of AI generated images","content":"\\nIn the [previous blog post](./11), I described how I set up an image generator that quite nicely fulfills my needs: The generator in the background is open-source, I have full cost control, I made the system easily usable to others and it is really privacy-conserving. However, I could not resist the temptation to make it easier for others to see some of the images and to try to set up small incentive systems in the form of collector NFTs. The main changes are:\\n\\n- A public gallery for images that you explicitly want to share with others.\\n- The possibility to collect public images in the form of NFTs and hence support the creators.\\n\\nThey are all nicely visible in the screen shot below.\\n\\n<figure id=\\"screenshot\\">\\n<img src=\\"/blog/ScreenShot_PublicGallery.png\\" width=\\"100%\\" />\\n<figcaption>Screen shot of the new public gallery with a collect feature.</figcaption>\\n</figure>\\n\\nLet me describe here, which major changes I made and give you some of the technical details.\\n\\n## Listing images in the public gallery\\n\\nI really enjoy the playful approach to image generation. But a lot of them fail and I do not really want to keep or share them. Hence, it is really easy to delete them from the blockchain and they are NOT listed to the public gallery by default. However, for a few of them I would actually be quite happy to share them with others. Hence, I added a simple new attribute to the smart contract, which is called `isListed` and set to `false` by default. The functionality is simple:\\n\\n- If this is set to `true`, the image is listed in the public gallery.\\n- If it is set to `false`, the image is not listed and can only be seen in the other tab.\\n\\nThis is a super simple approach, which is inspired by the [robots.txt](https://en.wikipedia.org/wiki/Robots.txt) approach. It does not securely make things private, but it unlists them from some public galleries. This approach is inspired by robots.txt - just as robots.txt doesn\'t technically prevent access but signals to web crawlers whether content should be indexed, the `isListed` flag signals whether an image should appear in public galleries. The data remains on the blockchain and is technically accessible, but won\'t be displayed in the public interface.\\n\\n### The pain of upgrading smart contracts\\n\\nI had already set up the smart contract to be upgradeable with [OpenZeppelin](https://docs.openzeppelin.com/upgrades-plugins/writing-upgradeable). However, initially I really enjoyed the work with [hardhat ignition](https://hardhat.org/ignition/docs/getting-started#overview) (a deployment tool) and [viem](https://viem.sh/) (a TypeScript library for Ethereum). So I tried to make the upgrades work with these tools for quite some time. The main issue was that Hardhat Ignition and Viem don\'t have built-in support for OpenZeppelin\'s upgrade patterns.\\n\\nIn the end it never really worked out and everything became much easier when I left hardhat ignition behind and simply used the [OpenZeppelin Hardhat Upgrades plugin](https://docs.openzeppelin.com/upgrades-plugins/1.x/overview). The OpenZeppelin Hardhat Upgrades plugin handles the complex proxy logic automatically, including storage layout validation and initialization functions.\\n\\nThis unfortunately means that I have to change the deployment stack for the smart contracts completely. However, Claude Sonnet has proven to be a great friend for the corresponding code. I am still not proud about it, but it works good enough for now.\\n\\n### Updating the website\\n\\nThe updates to the [imagegen](/imagegen) website were rather straightforward (again thanks to Claude Sonnet). I introduced a new tab which shows public images to anyone on the website. The functionality is obviously a bit different from the private tab, but overall the changes were fairly minimal.\\n\\n## Making images collectible\\n\\nOnce I was able to list images in the public gallery, I also wanted to allow others to collect them. The logic behind the little collect button is similar to the [support system](./7) for the blogs but a bit more evolved. In the contract for the support system, I implemented a simple mapping between the supported address and the number of supporters. Once you hit the support button, a small fee is sent to a specified address and the number of supporters is increased by one. However, this does not really create a market for the supported content and is very much a donation system.\\n\\n### The basic features of the collector NFT contract\\n\\nIn the case of the image generator, I wanted to go a step further. So I set up the system in the following fashion:\\n\\n- If you hit the collect button you get to mint a new NFT, which directly links to the original NFT. However, it is not from the same contract and hence the owner of the original NFT always remains the unique owner.\\n- When you collect the NFT, all the money is transferred into the wallet of the owner of the original NFT. This sets up a money transfer from the collector to the art creator and a financial resource stream similar to the one from the support button.\\n- However, now the collector has his own tradable copy that he could sell on [opensea.io](https://opensea.io/) if he feels like it.\\n\\n### Introducing scarcity\\n\\nThe whole thing is about artwork. So you have the strong feeling that it should be more expensive to collect \\"popular\\" art than the one from an unknown street artist. However, in a standard approach of unlimited collector NFTs, a collector could never achieve a price gain because any additional supporter would simply mint another NFT and that\'s it.\\n\\nTherefore, I decided to introduce an exponential increase in the mint price of the collector NFTs. The pricing follows an exponential progression where the price doubles with each batch of collectors:\\n\\n- Collectors 1-5: 0.001 ETH (base price)\\n- Collectors 6-10: 0.002 ETH (2x base price)\\n- Collectors 11-15: 0.004 ETH (4x base price)\\n- Collectors 16-20: 0.008 ETH (8x base price)\\n- Collectors 21-25: 0.016 ETH (16x base price)\\n- Collectors 26-30: 0.032 ETH (32x base price)\\n- And so on...\\n\\nThis means if you\'re the 12th collector, you pay 0.004 ETH, but if someone becomes the 27th collector later, your NFT becomes more valuable as the entry price has increased to 0.032 ETH.\\n\\nThis can solve a number of open questions:\\n\\n- There is a clear increase in the value of a collector NFT for popular art. The more collectors come in the more expensive it gets and early collectors can profit from it.\\n- The owner of the original NFT can profit from the popularity of his art in an exponential fashion. This also feels quite natural.\\n- Finally, you clearly create substantial scarcity and it will be rare to have much more than a few dozen collectors of a single image.\\n\\n### More pain with upgrades\\n\\nAs I worked on the `CollectorNFT`, I had to fix a few bugs and wanted to implement them in an upgrade. However, at that point I discovered that OpenZeppelin actually uses annotations to mark certain functions. And these annotations are really important when you work with the upgradeable plugins as they help you to secure the contract. They are not documented super well, but if you try to introduce them later on, they break the upgrades. So better introduce them early on.\\n\\n_The key lesson:_ OpenZeppelin uses special annotations like `@custom:oz-upgrades-unsafe-allow` to mark functions that might be dangerous in upgradeable contracts. These annotations must be present from the beginning - adding them later breaks the upgrade mechanism because the plugin validates the entire contract history.\\n\\n## Conclusion\\n\\nIt is super stimulating to work on this kind of topics as they allow me to play around with new ideas which have plenty of possibilities.\\n\\nThis project demonstrates how blockchain technology can create sustainable creator economies for AI-generated art. The combination of public galleries, collector NFTs, and exponential pricing creates interesting dynamics that traditional platforms can\'t replicate.\\n\\nNext steps I\'m considering:\\n\\n- Implementing royalty mechanisms for secondary sales\\n- More robust contracts and upgrade paths\\n- Enhancing the public gallery with search and filtering\\n- Adding community features like comments or ratings\\n\\nYou can try the system yourself at [imagegen](/imagegen) - I\'d love to see what images you create and whether anyone finds them worth collecting. The source code for both the smart contracts and frontend is available in my [GitHub repository](https://github.com/fretchen/fretchen.github.io).","type":"markdown","publishing_date":"2025-06-18","tokenID":23,"nftMetadata":{"imageUrl":"https://my-imagestore.s3.nl-ams.scw.cloud/images/image_23_25326560d9a8.png","prompt":"\\"A person enjoys working on the computer screen. On the screen you can see a minimalistic and mod...","name":"AI Generated Art #23","description":"AI generated artwork based on the prompt: \\"A person enjoys working on the computer screen. On the screen you can see a minimalistic and modern web interface showcasing a public gallery of AI-generated digital artworks. The layout includes a grid of diverse, visually striking AI images with vibrant colors and imaginative content. Each image has a subtle overlay with a “Collect” button and a visible price tag in ETH (e.g., “0.004 ETH”). The interface features tabs or filters at the top (\\"Private\\", \\"Public Gallery\\") and a clean, minimalist design. Aesthetic style is a blend of futuristic and artistic. Include small indicators like wallet icons or user avatars for creators. Background should be neutral and elegant to highlight the images.\\""}},{"title":"The Prisoner\'s Dilemma","content":"","type":"react","componentPath":"./blog/prisoners_dilemma_interactive.tsx","publishing_date":"2025-06-25","tokenID":30,"nftMetadata":{"imageUrl":"https://my-imagestore.s3.nl-ams.scw.cloud/images/image_30_8a9915e3faba.png","prompt":"\\"A picture that visualizes the prisoners Dilemma. The prisoners would like to cooperate, but they...","name":"AI Generated Art #30","description":"AI generated artwork based on the prompt: \\"A picture that visualizes the prisoners Dilemma. The prisoners would like to cooperate, but they must betray each other. Each prisoners sit in separate interrogation room chained to the table. In each of the interrogation room you can see them being intensely interrogated by a police officer. The scences looks like taken from Breaking Bad. One of the prisoners resembles Walter White. The other one Jesse.\\n\\nThe two scenes in the interrogation rooms are floating an abstract environment of logical math expressions connected to game theory.\\""}},{"title":"Tale of Four Islands: Solutions to the Tragedy of the Commons","content":"","type":"react","componentPath":"./blog/tragedy_of_commons_fishing.tsx","publishing_date":"2025-07-21","tokenID":35,"nftMetadata":{"imageUrl":"https://my-imagestore.s3.nl-ams.scw.cloud/images/image_35_e5d68097b109.png","prompt":"\\"A richly illustrated scene set around a large table overlooking the ocean, where four chiefs, tw...","name":"AI Generated Art #35","description":"AI generated artwork based on the prompt: \\"A richly illustrated scene set around a large table overlooking the ocean, where four chiefs, two men and two women, from culturally diverse island communities are engaged in a strategic meeting. The table displays an interactive digital map or dashboard showing shared fishing zones, fish stock data, and boat icons representing different levels of fishing effort. Charts and visual indicators show options like “1 Boat - Sustainable,” “8 Boats - Moderate,” and “16 Boats - Intensive.” One of the female chiefs loosely resembles the Moana character from the Disney movie.\\n\\nThe chiefs are actively interacting with the shared governance interface, discussing or pointing at various strategies: market solutions (💰), state authority (🏛️), and community-based governance (🤝). One screen panel shows “Ostrom’s Design Principles,” while another reveals simulation results and resource regeneration curves. Subtle elements like voting tokens, tokens of redistribution, or community rulebooks suggest collaboration and tradeoffs.\\n\\nThe environment is a blend of tradition and technology—a council hut or open-air structure with tablets, floating screens, and hand-drawn fishing maps. The atmosphere is one of thoughtful negotiation and shared responsibility over a vulnerable yet vital resource.\\n\\nVisual Style & Details:\\n\\n Diverse human characters in active conversation and interaction\\nInteractive governance dashboard with ocean/fish stock visualization\\nBlend of traditional and futuristic aesthetics\\n\\n    Sunlit tropical setting, symbolizing island ecosystems\\""}},{"title":" Merkle Trees for LLM Batching - The fundamentals","content":"","type":"react","componentPath":"./blog/merkle_ai_batching_fundamentals.tsx","publishing_date":"2025-07-29","tokenID":38,"nftMetadata":{"imageUrl":"https://my-imagestore.s3.nl-ams.scw.cloud/images/image_38_a4ca4910b4ba.png","prompt":"\\"An illustration of a blockchain network visualized as a glowing Merkle tree, with colorful branc...","name":"AI Generated Art #38","description":"AI generated artwork based on the prompt: \\"An illustration of a blockchain network visualized as a glowing Merkle tree, with colorful branches representing batched AI (LLM) requests. In the background, digital wallets and AI icons interact, symbolizing efficient, cost-optimized payments for AI services. The style should be modern, clean and minimalistic, suitable for a blog post about blockchain and AI integration.\\""}},{"title":"My AI Assistant That Takes ETH Instead of Subscriptions","content":"","type":"react","componentPath":"./blog/merkle_ai_batching.tsx","publishing_date":"2025-08-28","tokenID":41,"nftMetadata":{"imageUrl":"https://my-imagestore.s3.nl-ams.scw.cloud/images/image_41_b1345da220cb.png","prompt":"\\"A split-screen comparison illustration: Left side shows a frustrated developer paying ChatGPT wi...","name":"AI Generated Art #41","description":"AI generated artwork based on the prompt: \\"A split-screen comparison illustration: Left side shows a frustrated developer paying ChatGPT with a credit card and dealing with subscription hassles. Right side shows the same developer. He is very excited that he seamlessly connects his crypto wallet to an AI assistant, with ETH flowing directly from wallet to AI service. The contrast emphasizes friction vs. seamless experience. Modern, clean illustration style with warm colors on the right and cooler tones on the left .\\""}},{"title":"Can we decentralize access to quantum computing with smart contracts ?","content":"\\nIn this blog post, I want to dive into some ideas that have been going through my mind for a while now. I kept wondering, if it is possible to democratize access to quantum computing resources with the help of decentralized technologies, i.e. the blockchain. This question actually motivated a substantial amount of my work on the blockchain in the last few months and I will try to lay out my thoughts and learnings here. \\n\\nI think that this blog post will be the first one of roughly three posts. In this first one, I will lay out the context and the motivation. In the second one, I will try to connect the ideas to the learning that I have had so far with this website. In the third and last one, I will try to lay out some of the technical details of how the implementation could look like. \\n\\nBut now let\'s get started on this topic.\\n\\n## The bold vision\\n\\nQuantum computing is an upcoming computing technology with the potential to reshape the software and hardware industry. And due to the complexity of building the machines it is a cloud first technology at this stage. Within this context, it would be great to unlock this power to as many stakeholders as possible with decentralized technologies.\\n\\n## The point of this document\\n\\nIt is fun to work on tough problems. But it is only really fun once you get to share and think about them together with other collaborators and try to see how to solve it together. So these blog posts aremeant as a first piece that allows everyone that cares to shape some basic concepts and ideas and get this beyond the currently fuzzy ideas (maybe kill it, maybe make it a working reality).\\n\\nAccidentally [this blog post](https://www.wearedevelopers.com/magazine/how-to-create-dao-guide) also recommends to start out with a clear intent document etc before you get into more technical details.\\n\\n## The problem that should be solved\\n\\nI already described the problem a bit [on this repo](https://alqor-ug.github.io/sqooler/v0.9/idea_payment/), but for the sake of completeness I will try to summarize it again here. If people try to use quantum computers nowadays it goes a bit like this:\\n\\n1. Write some instructions, i.e. some json.\\n2. Send the instructions to some super fancy machine you do not really understand, i.e. a quantum computer.\\n3. Get back the result that you really do not want to share with anyone but that you also do not really understand in a lot of cases.\\n\\nQuite frankly, almost no one cares on which machine the calculations are done. And how you can and should pay for the results is a bit of an open question but for the moment people go through good old web2 approaches like amazon [braket](https://aws.amazon.com/de/braket/) etc.\\n\\nTaken together it might not take too much fantasy to think that it could be quite awesome to find a privacy conserving, decentral payment solution to this problem.\\n\\n## The fuzzy “smart contracts for quantum computing” idea\\n\\nBeware, the following ideas are based on an embarrassingly poor understanding of blockchain technologies but they are too tempting to not be scribbled down. The main questions that I have been asking myself are:\\n\\n- Wouldn’t it be cool if the payment could be based on smart contracts ?\\n- Wouldn’t it be possible to just send the instructions out to some “reliable” node and get back the result ?\\n- Could the result be an encrypted NFT or something like that ?\\n\\nTaken together it would seem that smart contracts could provide a really needed technological solution to a problem that is decentral and involves payments. So how to solve it ? I worked through some of the technicalities in a web2 world and did not see any real roadblocks for the moment. However, transitioning towards the block-chain is a very different beast. If you look through the website you will see that a lot of the blockchain + ai work actually implements solutions that are not too far away from this idea. This is what I will talk about in the next blog post.\\n\\nIf you have experiences, ideas or suggestions, feel free to write down ideas here, exchange and get active. The more people that care are, the more real gets the idea of a functioning smart contract for quantum computing.","type":"markdown","publishing_date":"2025-10-02","tokenID":123,"nftMetadata":{"imageUrl":"https://my-imagestore.s3.nl-ams.scw.cloud/images/image_123_b819dfe7d67e.jpg","prompt":"\\"Depict a puzzle with a missing piece, where the missing piece is a smart contract. On some puzzl...","name":"AI Generated Art #123","description":"AI generated artwork based on the prompt: \\"Depict a puzzle with a missing piece, where the missing piece is a smart contract. On some puzzle pieces you can see comic style images of quantum computers. On other puzzle pieces you can see symbols that sympolize payments. On the missing piece that is laying slightly away from the puzzle you see a visualisation of a smart contract.\\""}}]');export{e as b};
