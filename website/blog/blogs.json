[
  {
    "title": "Hello World",
    "content": "\nThis is the first post. It shows that the whole thing is working out nicely.",
    "publishing_date": "2024-12-02"
  },
  {
    "title": "Ideas behind the blog stack",
    "content": "\nOver the last few years I kept writing notes and code in all kind of different ways. Sometimes I would use Wordpress, personal notes, markdown or Jupyter notebooks. They get saved in some repo and there you go. But these days I would like to bring them slowly together into some more common structure, i.e. on one common website.\n\nMy rather heavy reliance on Jupyter notebooks and markdown really mostly ruled out Wordpress. I also really like the ideas behind static site generators. They are simple, fast and can be version controlled. Then I had to choose the appropiate stack. The first logical idea would have been [mkdocs-material](https://squidfunk.github.io/mkdocs-material/). I have made great experiences with it in the past. It is super simple to set up, very configurable and it looks great. However, I recently started to have a deeper look into proper web tech of the type of React and it is simply sooo much more natural to work with those components etc.\n\nHaving settled on _React_, I first thought that it is totally enough to work with [create-react-app](https://create-react-app.dev/). However, you soon realize that there have been no releases over the last few years and that the project is not really maintained anymore. A cute little solution was then [nano-react-app](ttps://github.com/nano-react-app/nano-react-app). It is a super minimalistic setup and worked well as I started to play around.\n\nThis got me far enough with a single webpage. But as I wanted to have a blog with multiple posts, I had to think about how to structure the whole thing. And this is the moment where you need some kind of routers. And this is the moment, where I had to learn what react meant with the following statement [on their website](https://react.dev/learn/start-a-new-react-project):\n\n> If you want to build a new app or a new website fully with React, we recommend picking one of the React-powered frameworks popular in the community.\n>\n> You can use React without a framework, however weâ€™ve found that most apps and sites eventually build solutions to common problems such as code-splitting, routing, data fetching, and generating HTML. These problems are common to all UI libraries, not just React.\n>\n> By starting with a framework, you can get started with React quickly, and avoid essentially building your own framework later.\n\nI really wanted to avoid this blow at the beginning but with the need for multiple pages I had to dive into this. After some research, I settled on [vike](https://vike.dev/). It provides everything I need and super flexible. It also has a bit of an indie vibe, which made it more sympathic. Finally setting it up is made quite easy with [create-bati](https://batijs.dev).\n\nSo here we are. I have a blog stack that I can work with. It is not perfect but it is a start. I will keep you updated on how it goes.",
    "publishing_date": "2025-01-03"
  },
  {
    "title": "Moving old lectures",
    "content": "\nIn my time in academia, I gave a few lectures on various topics. They are saved as latex, markdown, jupyter notebook, whatever you want. But to get started, I decided to move over a number of lectures on AMO that I gave for several years.\n\nI had them all saved on a website called Authorea and could export them directly as latex. So what could be easier than just importing them right ?\n\n## Challenge 1: Loading the markdown\n\nIt was really quite straight forward to convert the files through pandoc with the command `pandoc MY__INPUT_FILE.tex -s -o MY_FILE.md`. However, once you have markdown I have to import it into the website. And it is really at this stage where my little python world crumbles. You have the habit that files are yours and any access from any script is identical. However, within the world of javascript, I suddenly had to think about strange things like clients / servers / build times etc. In the end, I chose a solution similiar to the one described by [vike](https://vike.dev/markdown) with a little script that converts the markdown into a json file. This json file is then loaded into the website without the need of any `fs`.\n\n## Challenge 2: Equations and references\n\nThe first challenge, already existed for the blogs in general. But now I also had to handle equations and references. To render them you need a surprising amount of extensions to remark including:\n\n- [rehype-katex](https://www.npmjs.com/package/rehype-katex) for compiling the equations.\n- [remark-gfm](https://github.com/remarkjs/remark-gfm) for references in footnotes\n- [remark-math](https://www.npmjs.com/package/remark-math) for compiling equations.\n\nDespite all of those packages I needed to write a processing script that removed equation labels, equation alignements and also keep the spacing right. All in all it is nicer to use latex for long documents ...\n\n## Challenge 3: Images\n\nNow I was already quite proud about the result, but then I realized that the images were not loading. Remember how I was loading markdown into a `json` ? Well this messed up the references to images in production. So I had to copy the images into public folder. Further, I had to find a way to keep the images at an appropiate size. This worked nicely with the `img` link, but to have this you must allow for [rehype-raw](https://www.npmjs.com/package/rehype-raw). But then it was all good.\n\n## Conclusion\n\nBuilding up this kind of content management is really only for the curious. Otherwise, projects like docusaurus or astro are much more suited. But now I have a cute little system puzzled together and can extend it at will. All of this with a very limited amount of complexity. FWIW, the code can be [found here](https://github.com/fretchen/fretchen.github.io).",
    "publishing_date": "2025-01-06"
  },
  {
    "title": "Are decentral websites a thing for me ?",
    "content": "\nOver the last few years, I kept wondering what it might mean to host a \"decentral\" website very much like it is possible to decentralize certain financial services through smart contracts [^2]. What would be needed ?\n\n[^2]: The stuff done on [Uniswap](https://app.uniswap.org/) for example is quite impressive.\n\n- A decentral domain provider.\n- A simple way to update the website.\n- A decentralized storage system.\n\nAs we will see the first and last part are fairly straight-forward. For the decentral storage I continue to have some doubts.\n\n## Get an ENS domain\n\nNormally, each website is hosted on some servers and you can access them through some domain. Currently, this website is hosted by github, which also delivers me directly the domain address. And behind Github is simply a big company which handles the domain registration for me. If I want to go decentral, I try to avoid this company and simply register the domain on a blockchain. This is already possible with [ENS](https://ens.domains/). This is a great start as it gets us closer to have some fancy adress like `fretchen.eth`. To get this I needed to set up a wallet, where [Metamask](https://metamask.io/) seems to be the absolute standard nowadays. Once I have the wallet, I need to convert normal currency into the currency of the Blockchain, which is here [Eutherum](https://ethereum.org/en/) [^1].\n\n[^1]: From my understanding Eutherum is THE biggest blockchain, which allows you to run smart contracts and quite energy efficient. It feels a bit like the Linux of the blockchain world.\n\nTo buy the euthereum, I had to go through [Kraken](https://www.kraken.com) and then send myself the ETH into the Metamask wallet. With the ETH I could quite simply register the domain of my choice with [ENS](https://ens.domains/). The purchase itself is fairly straight-forward and interestingly the domain is implemented as an NFT. This is the tech that is mostly used to allow people to claim ownership for weird pictures of bored apes. Here, it basically gets you exclusive access rights to the domain, which actually sounds quite smart. The other cool thing is that `ens.domains` is a DAO. So there is no single authority controlling it, but a community of people. Another fairly cool feature.\n\n## A simple way to update the website\n\nThis is the part where it started to get slightly non-trivial. In the centralized world we have simple no-code systems like [wordpress](https://wordpress.org/) that run on a server. All of this is not really available on decentral systes. So we need some way to fall back into static website generation very much like I do here. But once, you can host a static website on [github pages](https://pages.github.com/), it should also be theoretically ready to host it decentrally. Given that this is clearly solved (otherwise you would not read this), it was time to try to get this onto the block-chain.\n\n## A decentralized storage system\n\nAnd this is now the part which was really quite annoying. At first, you think \"Let me put it onto the blockchain\". Well you quite quickly realize that this is totally cost-prohibitive and that you need some kind of alternative. The most famous and commonly used solution there is the [IPFS](https://ipfs.tech/). As you put a file / folder into the IPFS it gets a CID and becomes discoverable for others. But in contrast to systems like euthereum it feels quite different:\n\n- Either you have to run your own IPFS node, which is quite a bit of work. I never was able to have relible notes with acceptable download speeds.\n- Or you use a service like [Pinata](https://pinata.cloud/), which is a centralized service that pins your files for you. This is quite a bit of a bummer, as it is not really decentralized anymore. Further you mostly have to pay through dollars etc. So there is really no clear difference to the world of standard cloud storages there.\n\n## Conclusion\n\nAnd this is also the moment at which I wrote this blog post. I could now try to pay for the pinning service, put the CID onto eth.domains and claim some decentralized website. But what did I win ?\n\n- The service is still quite centralized.\n- I have really slow site accessbility.\n\nSo I am really not sure if I will go down this road any further at this stage. I keep wondering how the master himself handles the storage of [his blog](https://vitalik.eth.limo/). But I guess I will have to keep on reading and keep waiting for helpful insights.",
    "publishing_date": "2025-01-18"
  },
  {
    "title": "Is mirror.xyz a thing ?",
    "content": "\n_The original post on mirror can be found [here](https://mirror.xyz/fretchen.eth/2rSj34fa8cyhADVEI0p_fVO25d-hCQ6AqC38QGBsik4?referrerAddress=0x073f26F0C3FC100e7b075C3DC3cDE0A777497D20)._\n\nOver the last few weeks I kept investigating different ways to my website and to publish content. For the moment I am really happy with the tradtional web2 setup where we I host the static website and voila. However, I recently stumbled across [mirror.xyz](https://mirror.xyz/) and I am intruiged. It feels very much like other publishing platforms like [medium](https://medium.com/). You write a post (like this one) and publish it. With the right ens name and metamask wallet the whole login experience is really smooth. Now the neat thing comes in with the financials. It does not really cost you anything to publish your post which is already a nice break from the usual web3 world where even breathing costs you money. But the neat thing is that people can support you as a creator by mint and liking your post. All of this is deeply integrated into the euthereum eco system and the low fees are enabled by the [optimism chain](https://www.optimism.io/).\n\nThis all inspires new approaches to publishing in a very decentralized way. You publish, people can verify how you are and payment is also included. This takes a lot of the creepiness of advertisement based platforms away. So I think that I will start to cross post these posts to mirror and see how it goes.\n\nThe original post on mirror can be found [here](https://mirror.xyz/fretchen.eth/2rSj34fa8cyhADVEI0p_fVO25d-hCQ6AqC38QGBsik4?referrerAddress=0x073f26F0C3FC100e7b075C3DC3cDE0A777497D20).",
    "publishing_date": "2025-03-09"
  },
  {
    "title": "Can I have interactive python pages ?",
    "content": "\n_The original post on mirror can be found [here](https://mirror.xyz/fretchen.eth/iglgKZeAeHcUc_-Ya9cjQQ1vUNqhJTRUswredn-53e8?referrerAddress=0x073f26F0C3FC100e7b075C3DC3cDE0A777497D20)._\n\nOne of my main motivations to start this website was to consolidate different lectures, writings and other things that accumulated over the years in different places. The first project was to actually move my AMO lectures. This is now finished and can be found over [here](https://www.fretchen.eu/amo). I started with this as it was a really simple test case without anything interactive components.\n\nHowever, I have a few more projects which are really based on [jupyter](https://jupyter.org/) notebooks. jupyter notebooks are just a fantastic tool to combine notes with simple visualizations and the [jupyter book](https://jupyterbook.org) project is really a great way to publish them. The only \"annoying\" drawback has been for years that you have to somehow download the notebook and run it locally or go into some service like [binder](https://mybinder.org/).\n\nThe rise of python in the browser actually promises to changes that at some point. What does this mean ? Projects like [jupyterlite](https://github.com/jupyterlite) allow you to run the full jupyter experience without any installation. And tools like [pyodide](https://pyodide.org/en/stable/) bring python directly into the brower. Just python programming without the cloud, or any installation. It all just runs in the browser. This would make the jupyter notebooks that I loved so extremely portable. And actually, there are now package that attempt to connect this directly to [react](https://github.com/elilambnz/react-py). If this worked out I would have:\n\n- A blog that is written in markdown.\n- The possibility to add small python snippets directly into the blog.\n- All of this part of a website without the need to install anything.\n\nI gave all of this a try and `react-py` looked particularly interesting. However, the ecosystem still seems fairly young and it was super painful to get even the simplest examples to run. I must admit that I gave up for the moment, when I understood that pyodide and hence `react-py` does always require a [build for tests](https://pyodide.org/en/latest/usage/working-with-bundlers.html). Having it in `dev` would have been a minimum to make it an enjoyable experience.\n\nSo for the moment I will most likely just transform the jupyter notebooks into react / plein markdown and then see how the ecosystem evolves. But kudos to the people behind _python-in-the-browser_. This is a super exciting development for all kind of data science and will make the ecosystem much more decentralized and accessible. Any suggestions or additional information ? Then just leave them in the comments below.",
    "publishing_date": "2025-03-11"
  },
  {
    "title": "Running an image generator",
    "content": "\nJust as about every other person on the planet, I have been playing around with [stable diffusion](https://stability.ai/) and other image generators. But I personally do not care too much about the exact details, which model is best etc. I wanted to have my own personal system. I made some good progress on it and I felt that it could be time to share some of my findings.\n\n## My goal\n\nWhen I set up my system, I started with a few conditions:\n\n1. I want it to be accessible really easily my own website, which is static.\n2. I want to use open source models.\n3. The infrastructure to run the system should be hosted in Europe.\n4. At some point I must be able to limit access to the system or let people pay for it.\n\n## Using model for image generation\n\nTo generate the images I need to have some back-end that is non-static and that I can easily call through some API. Several options exist, but for the moment I really like the system  by [Ionos](https://cloud.ionos.de/managed/ai-model-hub). It is a straight-forward API with several open source models for image generation like [Stable Diffusion](https://stability.ai/) or FLUX. The system is hosted in Europe, which I personally like these days and the costs are ok. You can get started within minutes on a local setup.\n\n## Using the model in a static website\n\nHowever, to use the model you need to have some kind of API key. And on a static website there is no really nice way to store such keys. Therefore, I decided to go with a serverless setup. Here, I must admit that I was surprised how hard it was to find something that was not run by an American company. If you go with the American companies you have an almost infinite choice between Amazon, Vercel and so on. However, on the European side, I could only find [Scaleway](https://www.scaleway.com/en/) with their functions. This setup works quite nicely. Now I have simple website that calls Scaleway, which then calls the Ionos API and returns the image. The whole thing is hosted in Europe.\n\n## Decentral payments\n\nThe generation of each image has a cost of less than one euro. However, somehow I need to pass the cost to the user. I really do not want to go with weird advertisement things. So I could go with some traditional payment services. However, it would be substantially more fun to use some web3 payment. I am now quite sure that ChainLink functions are an interesting way to go. It is just a slightly steep learning curve and a fairly new technology. Let's see how it goes. I will keep you updated on the progress.",
    "publishing_date": "2025-04-08"
  }
]