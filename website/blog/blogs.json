[
  {
    "title": "Hello World",
    "content": "\nThis is the first post. It shows that the whole thing is working out nicely.",
    "publishing_date": "2024-12-02"
  },
  {
    "title": "Ideas behind the blog stack",
    "content": "\nOver the last few years I kept writing notes and code in all kind of different ways. Sometimes I would use Wordpress, personal notes, markdown or Jupyter notebooks. They get saved in some repo and there you go. But these days I would like to bring them slowly together into some more common structure, i.e. on one common website.\n\nMy rather heavy reliance on Jupyter notebooks and markdown really mostly ruled out Wordpress. I also really like the ideas behind static site generators. They are simple, fast and can be version controlled. Then I had to choose the appropiate stack. The first logical idea would have been [mkdocs-material](https://squidfunk.github.io/mkdocs-material/). I have made great experiences with it in the past. It is super simple to set up, very configurable and it looks great. However, I recently started to have a deeper look into proper web tech of the type of React and it is simply sooo much more natural to work with those components etc.\n\nHaving settled on _React_, I first thought that it is totally enough to work with [create-react-app](https://create-react-app.dev/). However, you soon realize that there have been no releases over the last few years and that the project is not really maintained anymore. A cute little solution was then [nano-react-app](ttps://github.com/nano-react-app/nano-react-app). It is a super minimalistic setup and worked well as I started to play around.\n\nThis got me far enough with a single webpage. But as I wanted to have a blog with multiple posts, I had to think about how to structure the whole thing. And this is the moment where you need some kind of routers. And this is the moment, where I had to learn what react meant with the following statement [on their website](https://react.dev/learn/start-a-new-react-project):\n\n> If you want to build a new app or a new website fully with React, we recommend picking one of the React-powered frameworks popular in the community.\n>\n> You can use React without a framework, however weâ€™ve found that most apps and sites eventually build solutions to common problems such as code-splitting, routing, data fetching, and generating HTML. These problems are common to all UI libraries, not just React.\n>\n> By starting with a framework, you can get started with React quickly, and avoid essentially building your own framework later.\n\nI really wanted to avoid this blow at the beginning but with the need for multiple pages I had to dive into this. After some research, I settled on [vike](https://vike.dev/). It provides everything I need and super flexible. It also has a bit of an indie vibe, which made it more sympathic. Finally setting it up is made quite easy with [create-bati](https://batijs.dev).\n\nSo here we are. I have a blog stack that I can work with. It is not perfect but it is a start. I will keep you updated on how it goes.",
    "publishing_date": "2025-01-03"
  },
  {
    "title": "My lessons from running a (super) small company",
    "content": "\nOver the last few years, I adventured into the real of running my own little company. Now that I actually have decided to close it down it, it is maybe a good time to reflect on this experience a bit. ",
    "publishing_date": "2025-01-03"
  },
  {
    "title": "Moving old lectures",
    "content": "\nIn my time in academia, I gave a few lectures on various topics. They are saved as latex, markdown, jupyter notebook, whatever you want. But to get started, I decided to move over a number of lectures on AMO that I gave for several years.\n\nI had them all saved on a website called Authorea and could export them directly as latex. So what could be easier than just importing them right ?\n\n## Challenge 1: Loading the markdown\n\nIt was really quite straight forward to convert the files through pandoc with the command `pandoc MY__INPUT_FILE.tex -s -o MY_FILE.md`. However, once you have markdown I have to import it into the website. And it is really at this stage where my little python world crumbles. You have the habit that files are yours and any access from any script is identical. However, within the world of javascript, I suddenly had to think about strange things like clients / servers / build times etc. In the end, I chose a solution similiar to the one described by [vike](https://vike.dev/markdown) with a little script that converts the markdown into a json file. This json file is then loaded into the website without the need of any `fs`.\n\n## Challenge 2: Equations and references\n\nThe first challenge, already existed for the blogs in general. But now I also had to handle equations and references. To render them you need a surprising amount of extensions to remark including:\n\n- [rehype-katex](https://www.npmjs.com/package/rehype-katex) for compiling the equations.\n- [remark-gfm](https://github.com/remarkjs/remark-gfm) for references in footnotes\n- [remark-math](https://www.npmjs.com/package/remark-math) for compiling equations.\n\nDespite all of those packages I needed to write a processing script that removed equation labels, equation alignements and also keep the spacing right. All in all it is nicer to use latex for long documents ...\n\n## Challenge 3: Images\n\nNow I was already quite proud about the result, but then I realized that the images were not loading. Remember how I was loading markdown into a `json` ? Well this messed up the references to images in production. So I had to copy the images into public folder. Further, I had to find a way to keep the images at an appropiate size. This worked nicely with the `img` link, but to have this you must allow for [rehype-raw](https://www.npmjs.com/package/rehype-raw). But then it was all good.\n\n## Conclusion\n\nBuilding up this kind of content management is really only for the curious. Otherwise, projects like docusaurus or astro are much more suited. But now I have a cute little system puzzled together and can extend it at will. All of this with a very limited amount of complexity. FWIW, the code can be [found here](https://github.com/fretchen/fretchen.github.io).",
    "publishing_date": "2025-01-06"
  },
  {
    "title": "Are decentral websites a thing for me ?",
    "content": "\nOver the last few years, I kept wondering what it might mean to host a \"decentral\" website very much like it is possible to decentralize certain financial services through smart contracts [^2]. What would be needed ?\n\n[^2]: The stuff done on [Uniswap](https://app.uniswap.org/) for example is quite impressive.\n\n- A decentral domain provider.\n- A simple way to update the website.\n- A decentralized storage system.\n\nAs we will see the first and last part are fairly straight-forward. For the decentral storage I continue to have some doubts.\n\n## Get an ENS domain\n\nNormally, each website is hosted on some servers and you can access them through some domain. Currently, this website is hosted by github, which also delivers me directly the domain address. And behind Github is simply a big company which handles the domain registration for me. If I want to go decentral, I try to avoid this company and simply register the domain on a blockchain. This is already possible with [ENS](https://ens.domains/). This is a great start as it gets us closer to have some fancy adress like `fretchen.eth`. To get this I needed to set up a wallet, where [Metamask](https://metamask.io/) seems to be the absolute standard nowadays. Once I have the wallet, I need to convert normal currency into the currency of the Blockchain, which is here [Eutherum](https://ethereum.org/en/) [^1].\n\n[^1]: From my understanding Eutherum is THE biggest blockchain, which allows you to run smart contracts and quite energy efficient. It feels a bit like the Linux of the blockchain world.\n\nTo buy the euthereum, I had to go through [Kraken](https://www.kraken.com) and then send myself the ETH into the Metamask wallet. With the ETH I could quite simply register the domain of my choice with [ENS](https://ens.domains/). The purchase itself is fairly straight-forward and interestingly the domain is implemented as an NFT. This is the tech that is mostly used to allow people to claim ownership for weird pictures of bored apes. Here, it basically gets you exclusive access rights to the domain, which actually sounds quite smart. The other cool thing is that `ens.domains` is a DAO. So there is no single authority controlling it, but a community of people. Another fairly cool feature.\n\n## A simple way to update the website\n\nThis is the part where it started to get slightly non-trivial. In the centralized world we have simple no-code systems like [wordpress](https://wordpress.org/) that run on a server. All of this is not really available on decentral systes. So we need some way to fall back into static website generation very much like I do here. But once, you can host a static website on [github pages](https://pages.github.com/), it should also be theoretically ready to host it decentrally. Given that this is clearly solved (otherwise you would not read this), it was time to try to get this onto the block-chain.\n\n## A decentralized storage system\n\nAnd this is now the part which was really quite annoying. At first, you think \"Let me put it onto the blockchain\". Well you quite quickly realize that this is totally cost-prohibitive and that you need some kind of alternative. The most famous and commonly used solution there is the [IPFS](https://ipfs.tech/). As you put a file / folder into the IPFS it gets a CID and becomes discoverable for others. But in contrast to systems like euthereum it feels quite different:\n\n- Either you have to run your own IPFS node, which is quite a bit of work. I never was able to have relible notes with acceptable download speeds.\n- Or you use a service like [Pinata](https://pinata.cloud/), which is a centralized service that pins your files for you. This is quite a bit of a bummer, as it is not really decentralized anymore. Further you mostly have to pay through dollars etc. So there is really no clear difference to the world of standard cloud storages there.\n\n## Conclusion\n\nAnd this is also the moment at which I wrote this blog post. I could now try to pay for the pinning service, put the CID onto eth.domains and claim some decentralized website. But what did I win ?\n\n- The service is still quite centralized.\n- I have really slow site accessbility.\n\nSo I am really not sure if I will go down this road any further at this stage. I keep wondering how the master himself handles the storage of [his blog](https://vitalik.eth.limo/). But I guess I will have to keep on reading and keep waiting for helpful insights.",
    "publishing_date": "2025-01-18"
  },
  {
    "title": "Is mirror.xyz a thing ?",
    "content": "\n_The original post on mirror can be found [here](https://mirror.xyz/fretchen.eth/2rSj34fa8cyhADVEI0p_fVO25d-hCQ6AqC38QGBsik4?referrerAddress=0x073f26F0C3FC100e7b075C3DC3cDE0A777497D20)._\n\nOver the last few weeks I kept investigating different ways to my website and to publish content. For the moment I am really happy with the tradtional web2 setup where we I host the static website and voila. However, I recently stumbled across [mirror.xyz](https://mirror.xyz/) and I am intruiged. It feels very much like other publishing platforms like [medium](https://medium.com/). You write a post (like this one) and publish it. With the right ens name and metamask wallet the whole login experience is really smooth. Now the neat thing comes in with the financials. It does not really cost you anything to publish your post which is already a nice break from the usual web3 world where even breathing costs you money. But the neat thing is that people can support you as a creator by mint and liking your post. All of this is deeply integrated into the euthereum eco system and the low fees are enabled by the [optimism chain](https://www.optimism.io/).\n\nThis all inspires new approaches to publishing in a very decentralized way. You publish, people can verify how you are and payment is also included. This takes a lot of the creepiness of advertisement based platforms away. So I think that I will start to cross post these posts to mirror and see how it goes.\n\nThe original post on mirror can be found [here](https://mirror.xyz/fretchen.eth/2rSj34fa8cyhADVEI0p_fVO25d-hCQ6AqC38QGBsik4?referrerAddress=0x073f26F0C3FC100e7b075C3DC3cDE0A777497D20).",
    "publishing_date": "2025-03-09"
  },
  {
    "title": "Can I have interactive python pages ?",
    "content": "\n_The original post on mirror can be found [here](https://mirror.xyz/fretchen.eth/iglgKZeAeHcUc_-Ya9cjQQ1vUNqhJTRUswredn-53e8?referrerAddress=0x073f26F0C3FC100e7b075C3DC3cDE0A777497D20).\\_\n\nOne of my main motivations to start this website was to consolidate different lectures, writings and other things that accumulated over the years in different places. The first project was to actually move my AMO lectures. This is now finished and can be found over [here](https://www.fretchen.eu/amo). I started with this as it was a really simple test case without anything interactive components.\n\nHowever, I have a few more projects which are really based on [jupyter](https://jupyter.org/) notebooks. jupyter notebooks are just a fantastic tool to combine notes with simple visualizations and the [jupyter book](https://jupyterbook.org) project is really a great way to publish them. The only \"annoying\" drawback has been for years that you have to somehow download the notebook and run it locally or go into some service like [binder](https://mybinder.org/).\n\nThe rise of python in the browser actually promises to changes that at some point. What does this mean ? Projects like [jupyterlite](https://github.com/jupyterlite) allow you to run the full jupyter experience without any installation. And tools like [pyodide](https://pyodide.org/en/stable/) bring python directly into the brower. Just python programming without the cloud, or any installation. It all just runs in the browser. This would make the jupyter notebooks that I loved so extremely portable. And actually, there are now package that attempt to connect this directly to [react](https://github.com/elilambnz/react-py). If this worked out I would have:\n\n- A blog that is written in markdown.\n- The possibility to add small python snippets directly into the blog.\n- All of this part of a website without the need to install anything.\n\nI gave all of this a try and `react-py` looked particularly interesting. However, the ecosystem still seems fairly young and it was super painful to get even the simplest examples to run. I must admit that I gave up for the moment, when I understood that pyodide and hence `react-py` does always require a [build for tests](https://pyodide.org/en/latest/usage/working-with-bundlers.html). Having it in `dev` would have been a minimum to make it an enjoyable experience.\n\nSo for the moment I will most likely just transform the jupyter notebooks into react / plein markdown and then see how the ecosystem evolves. But kudos to the people behind _python-in-the-browser_. This is a super exciting development for all kind of data science and will make the ecosystem much more decentralized and accessible. Any suggestions or additional information ? Then just leave them in the comments below.",
    "publishing_date": "2025-03-11"
  },
  {
    "title": "Running an image generator",
    "content": "\nJust as about every other person on the planet, I have been playing around with [stable diffusion](https://stability.ai/) and other image generators. But I personally do not care too much about the exact details, which model is best etc. I wanted to have my own personal system. I made some good progress on it and I felt that it could be time to share some of my findings.\n\n## My goal\n\nWhen I set up my system, I started with a few conditions:\n\n1. I want it to be accessible really easily my own website, which is static.\n2. I want to use open source models.\n3. The infrastructure to run the system should be hosted in Europe.\n4. At some point I must be able to limit access to the system or let people pay for it.\n\n## Using model for image generation\n\nTo generate the images I need to have some back-end that is non-static and that I can easily call through some API. Several options exist, but for the moment I really like the system by [Ionos](https://cloud.ionos.de/managed/ai-model-hub). It is a straight-forward API with several open source models for image generation like [Stable Diffusion](https://stability.ai/) or FLUX. The system is hosted in Europe, which I personally like these days and the costs are ok. You can get started within minutes on a local setup.\n\n## Using the model in a static website\n\nHowever, to use the model you need to have some kind of API key. And on a static website there is no really nice way to store such keys. Therefore, I decided to go with a serverless setup. Here, I must admit that I was surprised how hard it was to find something that was not run by an American company. If you go with the American companies you have an almost infinite choice between Amazon, Vercel and so on. However, on the European side, I could only find [Scaleway](https://www.scaleway.com/en/) with their functions. This setup works quite nicely. Now I have a simple website that calls Scaleway, which then calls the Ionos API and returns the image. The whole thing is hosted in Europe.\n\n## Decentral payments\n\nThe generation of each image has a cost of less than one euro. However, somehow I need to pass the cost to the user. I really do not want to go with weird advertisement things. So I could go with some traditional payment services. However, it would be substantially more fun to use some web3 payment. I am now quite sure that ChainLink functions are an interesting way to go. It is just a slightly steep learning curve and a fairly new technology. Let's see how it goes. I will keep you updated on the progress.",
    "publishing_date": "2025-04-06"
  },
  {
    "title": "A decentral support button",
    "content": "\nI recently came across the `mirror` platfrom and was really impressed by the possibilities of such a dentralized [social platform](4). What intrigued me most is that it might give content creators a very simple and direct way to get paid for the content. But after some more digging I must admit that it is not clear to me if [mirror.xyz](https://mirror.xyz/) is still really actively maintained. So I decided to give it a try and see if I might be able to build something similar. As you can see on the top right of this site I succeeded and will explain how I did it. I am not sure yet how long this post will be, so buckle up.\n\n## The goal\n\nI wanted to have a simple like / support button. Its functionality is quite straightforward:\n\n- As the user clicks on the button, he commits to support the content with a small amount of money.\n- The support is done via a transaction on the blckchain.\n- The smart contract keeps track of the number of likes for each site.\n\nFor me this is interesting for a few reasons:\n\n- It is a really simple smart contract. So it allows me to learn the basics of smart contracts in a very simple way.\n- It sets up a simple way to support the content that I create on this website.\n\n## How to use the support button\n\nTo use the button you need to have a wallet that is connected to the Ethereum network. I used [MetaMask](https://metamask.io/) for this.\n\nIn the next step, you need to make sure that you have sufficent ETH on the [optimism chain](https://www.optimism.io). If you don't have any ETH on the optimism chain, you can use the [optimism bridge](https://app.optimism.io/bridge) to transfer some ETH from the Ethereum mainnet to the optimism chain.\n\nNow, you are all set up to use the support button that you can find on the top right of this page. When you click it, a popup will open that allows you to send ETH to the smart contract. The amount of ETH is set to 0.002 ETH (rougly 50 cents). Once you confirm the transation, the smart contract will be called and the amount of ETH will be sent to the smart contract. The smart contract will then keep track of the number of likes for this specific URL and the number of supporters will be incremented. Thanks for your support!\n\nNow that you know how to use the button, I will explain how I set everything up.\n\n## Setting up the smart contract\n\nIn a first step, I had to decide how my smart contract should look like and then also set everything up to deploy it.\n\n### The smart contract\n\nI decided for a really simple approach based on [solidity](https://soliditylang.org/). The `Support` smart contract main hasly the `donate` function, which takes a URL as input and allows users to send ETH as a form of appreciation. Once the donation is called, ETH is transferred to the contract owner and the count of `urlLikes` is incremented.\n\nThe contract also includes a `getLikesForUrl` function, which allows anyone to check the number of likes for a specific URL. The contract is designed to be secure and efficient, utilizing OpenZeppelin's libraries for access control and reentrancy protection. One of the neat things of the blockchain is that you can the see fully deployed and verified code [here](https://optimistic.etherscan.io/address/0x314b07fbd33a7343479e99e6682d5ee1da7f17c1#code#F1#L1).\n\nAs I designed the contract, I actually wondered if I should use other approaches like NFTs or ERC20 tokens. But in the end there is no need for that at this stage and any of those increasing complexities may increase the risk of bugs and the gas fees.\n\n### Deploying and testing the smart contract\n\nAs this was my first smart contract, I actually had to learn all the basics. It would seem that you have two major frameworks nowadays: [Foundry](https://book.getfoundry.sh/) and [Hardhat](https://hardhat.org/). Hardhat seemed to fulfill all my requirements and well integrated into the usual javascript workflows. To get started, I really like the documentation for the [Hardhat Runner](https://hardhat.org/hardhat-runner/docs/guides/compile-contracts) here. In summary, the steps are:\n\n1. Install hardhat and the dependencies\n2. Compile the contracts `npx hardhat compile`.\n3. Write the tests for the contracts. I used [chai](https://www.chaijs.com/) and [viem](https://hardhat.org/hardhat-runner/docs/advanced/using-viem) for this.\n\nNow we are ready to deploy and test the contract. In the test environment this is quite straightforward as described [here](https://hardhat.org/hardhat-runner/docs/guides/deploying). But as you would like to deploy the contract to a real network, you need to set up a few things as described [here](https://hardhat.org/hardhat-runner/docs/guides/verifying). First, you need to create an account on [Alchemy](https://www.alchemy.com/) and get an API key. Then we can once again deploy the contract to the network of my choice, which was Optimism.\n\nFinally, we need to verify the contract on the blockchain. This is important as it allows others to see the code and verify that it is working as expected. Here again we need to set up a few things. First, you need to create an account on [Etherscan](https://etherscan.io/) and get an API key. Then, you need to set up the `ETHERSCAN_API_KEY` environment variable with your API key.\n\n### The Optimism chain\n\nOne of the crucial points for the support button was that it must not be too costly to use. On the Ethereum mainnet, I have frequently encountered gas fees of 20-50 USD. This would have been prohibitive for a simple like button.\n\nEvery blockchain transaction requires computational resources that must be paid for with \"gas fees.\" These fees represent the cost of having your transaction processed and validated by the network:\n\n- On Ethereum's mainnet, high demand for block space drives fees to levels that make micro-transactions impractical\n- When gas costs $20-50 per transaction, sending a $0.50 support donation becomes economically absurd\n- Layer 2 solutions like Optimism process transactions in batches and post the cryptographic proof to Ethereum, distributing that mainnet gas cost across many transactions.\n\nTherefore, I decided to investigate layer-2 alternatives, which promise much lower fees. As I investigated the major alternatives, I came across [Base](https://www.base.org/), [Arbitrum](https://arbitrum.io/), [Optimism](https://www.optimism.io/) and [Linea](https://linea.build/). All of them seemed fairly mature with slightly different focuses. Base is closely aligned with Coinbase, which makes it a bit less attractive for me. Linea seemed to be still quite new and not as widely adopted. Optimism on the other hand has some nice documententation, a strong community focus and a lot of projects already running on it. So I decided to go with Optimism.\n\nYou can see all the details for the deployed contract and activity on [Optimism Etherscan](https://optimistic.etherscan.io/address/0x314b07fbd33a7343479e99e6682d5ee1da7f17c1).\n\n## The frontend\n\nAfter I had the smart contract up and running, I needed to integrate it into the website. I decided to integrate it via [wagmi](https://wagmi.sh/), which is a library that makes it easy to interact with Ethereum from a react app. It provides a simple API for connecting to wallets, sending transactions, and reading data from the blockchain. It is also built around [viem](https://viem.sh/), which is a library for interacting with Ethereum in a type-safe way. This makes it easy to work with the blockchain and ensures that the code is safe and secure.\n\nThe integration itself, involved two parts:\n\n- the connection to the wallet.\n- the button itself.\n\n### The wallet connection\n\nTo set up the wallet, I followed quite closely the [wagmi documentation](https://wagmi.sh/react/getting-started). However, I am using `vike` and there is no `App.tsx`. So the integration is a bit different. I was able to activate `tanstack-query` with the [official plugin](https://vike.dev/tanstack-query). To wrap Wagmi itself, I hooked into the `LayoutDefault.tsx` component, which worked out quite nicely. For the rest I could simply follow the very simple and straight forward guide [here](https://wagmi.sh/react/guides/connect-wallet). I had a quick look into the different kits, but wanted to learn things for myself at this stage. If I ever decide to use one of the kits, I will likely try out [AppKit](https://appkit.dev/) first.\n\n### The support button\n\nNow that the wallet was set up, I could directly integrate the support button. This was also surprisingly straight forward as I could simply follow the documentation on how to [write](https://wagmi.sh/react/guides/write-to-contract) and [read](https://wagmi.sh/react/guides/read-from-contract) small contracts. To get the number of supports, I simply call the `getLikesForUrl` function of the smart contract. To support the content, I call the `donate` function of the smart contract. That's it. As every developer in the world, I spent too much time one the styling of the button, but otherwise it was simply an enjoyable experience.\n\n## My main learnings\n\n- Fees on L2 chains are really low now. A transfer of 50 cents sometimes costs less than 1 cent in gas fees. So this problem is really pretty much solved for now and L2s are really usable.\n- The development experience is really quite nice. Backend and frontend are nicely separated etc.\n- The biggest question for me will be how the whole transfer to L2 chains will work out in the long term.\n- I will continue to play with similiar applications as soon as I think about some kind of transfers.\n\n## A small look into the future\n\nI learned a few things that I would likely change in the future. I have mainly two things in mind.\n\n1. First, I would like to make sure that the contract is [upgradable](https://docs.openzeppelin.com/upgrades-plugins/writing-upgradeable). While it would make the initial deployment process more complex, it would make the entire system much easier to maintain in the long run.\n2. Second, I would most likely make it possible to select the adress of the recipient. This would also allow others to use the same contract and make the whole thing a bit more generic.\n\nSo I hope that you enjoyed the post. Comments as usual below. And any support through the support button is highly appreciated.",
    "publishing_date": "2025-04-21"
  },
  {
    "title": "My short lived contact with the world of VCs in Germany",
    "content": "\nFor a number of years, I worked in academia on the topic of quantum hardware. You can find the remainders of these activities sprinkeled over this blog. But over time it became increasingly clear to me that I would like to venture outside of this well trotten path. As this was the time where names like IonQ, IBM or Pasqal really where a super new and exciting thing to look at, I obviously also investigated the possibility of a startup.\n\n## The motivation\n\nMy research experience was really quite focused on hardware development, so it felt natural to look into possibilities in this direction and I left the topic of software on the side. However, this obviously comes with  quite enormous drawbacks:\n\n- Quantum hardware is *notoriously* slow to develop. To get something even close a hardware that I would nowadays consider an industrial prototype it takes you years.\n- Quantum hardware is notoriously expensive, which means that you are very quickly forced to raise substantial amounts of capital for deep tech.\n- Given that we have no running industrial prototypes of our tech yet, we cannot present the business case for the technology in any sound way.\n\nTaken together these three conditions meant that the very first steps of the company would need 1 to 2Mâ‚¬ of funding in the seed / preseed phase. To get this amount of money we basically had two options:\n\n- Get public funding. This comes attached with A LOT of strings, administration and is quite slow. It is nice to slowly expend out of your lab, but is not really adapted to get a startup of the ground.\n- Go to the VCs and pitch your case. Sounds fast, business oriented and with a clear growth path. So we also had to look into this option.\n\n## The VCs\n\n**A new culture:** As we started, we needed a team of at least three people, which went on a fundraising campaign. As we started to talk to the VCs it became increasingly clear that they really do not care about the tech but about the business case. But how do you explain the business case without a working prototype ? You basically have to make up the business case based on your current knowledge. And once you dream up those business cases, you have to show that they are scalable. FAST. So we had no working prototype for industrial standards, therefore no possibility to benchmark the business cases on sound numbers. Yet, we still had to present enormously ambitious business plans to the VCs.\n\n**A world of (unfounded?) assumptions:** This world was completely different to the academenic environment that I was used to. This made the beginning of the whole adventure super exciting. People are fast and responsive. They have a different perspective to your well known technical approach. They force you to think about the project in business ways that you never thought about before. On the other hand, this world is also based on enormous amounts of assumptions. With assumptions that are hard to verify for very long times. And assumptions that get stretch increasingly to make the ambitions of the VCs work. Further, these assumptions have substantial consequences. When your academic experiments fail, you do another one and move on. If your business assumptions fail you have burned massive amounts of money and everyone lost their job. \n\n**Diverging expections:** Given these consequences, I personally would have liked to go the cautious route. Yet, within the process our predictions got increasingly detached from reality. At some point we had discussions with technical experts that told us that our time lines are at least by a factor of two (rather four) to optimistic. On the other hand, we had discussions with VCs that told us that our timelines were at least a factor of two (rather four) to slow to make the fundraising cycle work. Personally, this was hard to digest and eventually one of the reasons why I had to get out of this business quite quickly.\n\n## Some realities on returns\n\nNow, you might argue that it is still all worth it because of the freedom you have and the possibility to get super mega rich right ? Well, not so fast.\n\n- If you would like to raise 1 to 2M  in Germany VCs were asking for at least 20% of the company but we are closer to thirty.\n- They also expect you to keep the equity within the company.\n- You have leaver clauses which bind you for years to the company.\n- With each round the shares of the owners get quite substantially diluted.\n\nThen you can go through the different scenarios\n\n*Scenario A: You go bust* This is what happens in something like 80% of the time. Over the years, you got your salary. It was sub industry and with enormous amounts of stress. To make the numbers simple let's say that you can assume that this scenario lost you roughly 100k (give or take) compared to your standard industry job.\n\n*Scenario B: You muddle through* You do not go bust. You have a product. It works, but it is not quite as profiable as you would like. This is after you raised Seed (VC took 30%), Series A (VC took 30%) and now it becomes clear that a Series B will not fly. So you have to find some buyer that takes the IP of the company for 5M and move on.  This will happen approximately 15% of the time. So in this scenario, you basically end with a 500k payday as one of the founders.\n\n*Scenario C: Payout by the big industrial player* You perform, you have raised Seed (VC took 30%), Series A (VC took 30%) and Series B (VC took 30%) and now you have pay day with a buyout of 50M. This will happen between 1 and 5 % of the time. So in this scenario, you basically end with a 5M payday.\n\nWhat is the expected value of the whole enterprise ? Taking the numbers above, we get to:\n\n (80% Ã— -100.000â‚¬) + (15% Ã— 500.000â‚¬) + (5% Ã— 5Mâ‚¬) = ~250.000â‚¬\n\nSo I end up with a rough expected return of 250k give or take. So it is certainly not a loss. But is this worth the stress and the uncertainty ? This is most likely the key question that everyone has to decide.\n\n## The end of the story\n\nI felt a huge amount of releave when I left this scene. I was never able to shake the imposter syndrome and could not enjoy the ride. I felt the excitement but the negative feeling were substantially stronger. Nowadays, I evolved on towards a completely different career path, which I am grateful about.\n\nBut all in all I think that I am saddest about the fact that it is so incredibly hard to get a deep tech startup off the ground in Germany. I still feel that the step from academic research and deep tech startups in Germany is so much bigger than it could be and a number of things could improve the situation quite drastically:\n\n- Better incubators connected to Universities. For a number of Universities there is very little incentive to have good incubator programs. Hence they are rarely up the potential. This would lighten the knowledge gap of researchers as they have to discuss the wonderful world of business. I would be interested to hear about successful examples.\n- Simplify the public funding process. It was really a nightmare to go through the public funding process. It genuinely felt like a bureaucracy that was only made to up to let some people feel important. Please, make it easier.\n- Get us all VCs with deeper knowledge. I think that this speaks to itself.\n\nI hope that you enjoyed the post. If you have any comments or suggestions, please leave them in the comments below. I would be happy to hear from you. And as usual, do not forget to push the like button.",
    "publishing_date": "2025-05-10"
  }
]